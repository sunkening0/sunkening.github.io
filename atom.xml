<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南风北巷</title>
  
  <subtitle>feeling life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-29T14:23:27.623Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sunkening</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何设计一个安全的对外接口?</title>
    <link href="http://yoursite.com/2019/11/29/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%AE%89%E5%85%A8%E7%9A%84%E5%AF%B9%E5%A4%96%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/11/29/如何设计一个安全的对外接口/</id>
    <published>2019-11-29T02:02:47.000Z</published>
    <updated>2019-11-29T14:23:27.623Z</updated>
    
    <content type="html"><![CDATA[<p>如果项目需要对外提供一个接口，提供公网域名进行访问，那么安全性就很重要；这里整理了一下常用的一些安全措施以及具体如何去实现。安全措施大体来看主要在两个方面，一方面就是如何保证数据在传输过程中的安全性，另一个方面是数据已经到达服务器端，服务器端如何识别数据，如何不被攻击。</p><a id="more"></a> <h3 id="1-数据加密"><a href="#1-数据加密" class="headerlink" title="1.数据加密"></a>1.数据加密</h3><p>我们知道数据在传输过程中是很容易被抓包的，如果直接传输比如通过http协议，那么用户传输的数据可以被任何人获取；所以必须对数据加密，常见的做法对关键字段加密比如用户密码直接通过md5加密；现在主流的做法是使用https协议，在http和tcp之间添加一层加密层(SSL层)，这一层负责数据的加密和解密；</p><h3 id="2-数据加签"><a href="#2-数据加签" class="headerlink" title="2.数据加签"></a>2.数据加签</h3><p>数据加签就是由发送者产生一段无法伪造的一段数字串，来保证数据在传输过程中不被篡改；你可能会问数据如果已经通过https加密了，还有必要进行加签吗？数据在传输过程中经过加密，理论上就算被抓包，也无法对数据进行篡改；但是我们要知道加密的部分其实只是在外网，现在很多服务在内网中都需要经过很多服务跳转，所以这里的加签可以防止内网中数据被篡改；</p><h3 id="3-时间戳机制"><a href="#3-时间戳机制" class="headerlink" title="3.时间戳机制"></a>3.时间戳机制</h3><p>数据是很容易被抓包的，但是经过如上的加密，加签处理，就算拿到数据也不能看到真实的数据；但是有不法者不关心真实的数据，而是直接拿到抓取的数据包进行恶意请求；这时候可以使用时间戳机制，在每次请求中加入当前的时间，服务器端会拿到当前时间和消息中的时间相减，看看是否在一个固定的时间范围内比如5分钟内；这样恶意请求的数据包是无法更改里面时间的，所以5分钟后就视为非法请求了；</p><h3 id="4-AppId机制"><a href="#4-AppId机制" class="headerlink" title="4.AppId机制"></a>4.AppId机制</h3><p>大部分网站基本都需要用户名和密码才能登录，并不是谁来能使用我的网站，这其实也是一种安全机制；对应的对外提供的接口其实也需要这么一种机制，并不是谁都可以调用，需要使用接口的用户需要在后台开通appid，提供给用户相关的密钥；在调用的接口中需要提供appid+密钥，服务器端会进行相关的验证；</p><h3 id="5-限流机制"><a href="#5-限流机制" class="headerlink" title="5.限流机制"></a>5.限流机制</h3><p>本来就是真实的用户，并且开通了appid，但是出现频繁调用接口的情况；这种情况需要给相关appid限流处理，常用的限流算法有令牌桶和漏桶算法；</p><h3 id="6-黑名单机制"><a href="#6-黑名单机制" class="headerlink" title="6.黑名单机制"></a>6.黑名单机制</h3><p>如果此appid进行过很多非法操作，或者说专门有一个中黑系统，经过分析之后直接将此appid列入黑名单，所有请求直接返回错误码；</p><h3 id="7-数据合法性校验"><a href="#7-数据合法性校验" class="headerlink" title="7.数据合法性校验"></a>7.数据合法性校验</h3><p>这个可以说是每个系统都会有的处理机制，只有在数据是合法的情况下才会进行数据处理；每个系统都有自己的验证规则，当然也可能有一些常规性的规则，比如身份证长度和组成，电话号码长度和组成等等；</p><p><strong>如何实现?</strong></p><p>以上大体介绍了一下常用的一些接口安全措施，当然可能还有其他我不知道的方式，希望大家补充，下面看看以上这些方法措施，具体如何实现；</p><p>1.数据加密<br>现在主流的加密方式有对称加密和非对称加密；<br>对称加密：对称密钥在加密和解密的过程中使用的密钥是相同的，常见的对称加密算法有DES，AES；优点是计算速度快，缺点是在数据传送前，发送方和接收方必须商定好秘钥，然后使双方都能保存好秘钥，如果一方的秘钥被泄露，那么加密信息也就不安全了；<br>非对称加密：服务端会生成一对密钥，私钥存放在服务器端，公钥可以发布给任何人使用；优点就是比起对称加密更加安全，但是加解密的速度比对称加密慢太多了；广泛使用的是RSA算法；<br>两种方式各有优缺点，而https的实现方式正好是结合了两种加密方式，整合了双方的优点，在安全和性能方面都比较好；<br>对称加密和非对称加密代码实现，jdk提供了相关的工具类可以直接使用，此处不过多介绍；关于https如何配置使用相对来说复杂一些（通过ngnix）</p><p>2.数据加签<br>数据签名使用比较多的是md5算法，将需要提交的数据通过某种方式组合和一个字符串，然后通过md5生成一段加密字符串，这段加密字符串就是数据包的签名，可以看一个简单的例子：</p><pre><code>str：参数1={参数1}&amp;参数2={参数2}&amp;……&amp;参数n={参数n}$key={用户密钥};MD5.encrypt(str);</code></pre><p>注意最后的用户密钥，客户端和服务端都有一份，这样会更加安全；</p><p>3.时间戳机制<br>解密后的数据，经过签名认证后，我们拿到数据包中的客户端时间戳字段，然后用服务器当前时间去减客户端时间，看结果是否在一个区间内，伪代码如下：</p><pre><code>long interval=5*60*1000；//超时时间long clientTime=request.getparameter(&quot;clientTime&quot;);long serverTime=System.currentTimeMillis();if(serverTime-clientTime&gt;interval){    return new Response(&quot;超过处理时长&quot;)}</code></pre><p>4.AppId机制<br>生成一个唯一的AppId即可，密钥使用字母、数字等特殊字符随机生成即可；生成唯一AppId根据实际情况看是否需要全局唯一；但是不管是否全局唯一最好让生成的Id有如下属性：</p><p>趋势递增：这样在保存数据库的时候，使用索引性能更好；<br>信息安全：尽量不要连续的，容易发现规律；<br>关于全局唯一Id生成的方式常见的有类snowflake方式等；</p><p>5.限流机制<br>常用的限流算法包括：令牌桶限流，漏桶限流，计数器限流；</p><ul><li>令牌桶限流</li><li>漏桶限流</li><li>计数器限流</li></ul><p>1.令牌桶限流<br>令牌桶算法的原理是系统以一定速率向桶中放入令牌，填满了就丢弃令牌；请求来时会先从桶中取出令牌，如果能取到令牌，则可以继续完成请求，否则等待或者拒绝服务；令牌桶允许一定程度突发流量，只要有令牌就可以处理，支持一次拿多个令牌；</p><p>2.漏桶限流<br>漏桶算法的原理是按照固定常量速率流出请求，流入请求速率任意，当请求数超过桶的容量时，新的请求等待或者拒绝服务；可以看出漏桶算法可以强制限制数据的传输速度；</p><p>3.计数器限流<br>计数器是一种比较简单粗暴的算法，主要用来限制总并发数，比如数据库连接池、线程池、秒杀的并发数；计数器限流只要一定时间内的总请求数超过设定的阀值则进行限流；</p><p>具体基于以上算法如何实现，Guava提供了RateLimiter工具类基于基于令牌桶算法：</p><pre><code>RateLimiter rateLimiter = RateLimiter.create(5);</code></pre><p>以上代码表示一秒钟只允许处理五个并发请求，以上方式只能用在单应用的请求限流，不能进行全局限流；这个时候就需要分布式限流，可以基于redis+lua来实现；</p><p>6.黑名单机制<br>如何为什么中黑我们这边不讨论，我们可以给每个用户设置一个状态比如包括：初始化状态，正常状态，中黑状态，关闭状态等等；或者我们直接通过分布式配置中心，直接保存黑名单列表，每次检查是否在列表中即可；</p><p>7.数据合法性校验<br>合法性校验包括：常规性校验以及业务校验；<br>常规性校验：包括签名校验，必填校验，长度校验，类型校验，格式校验等；<br>业务校验：根据实际业务而定，比如订单金额不能小于0等；</p><p>————————————————<br>原文链接：<a href="https://blog.csdn.net/Dome_/article/details/103299890" target="_blank" rel="noopener">https://blog.csdn.net/Dome_/article/details/103299890</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果项目需要对外提供一个接口，提供公网域名进行访问，那么安全性就很重要；这里整理了一下常用的一些安全措施以及具体如何去实现。安全措施大体来看主要在两个方面，一方面就是如何保证数据在传输过程中的安全性，另一个方面是数据已经到达服务器端，服务器端如何识别数据，如何不被攻击。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="javase" scheme="http://yoursite.com/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>GIT使用指南</title>
    <link href="http://yoursite.com/2019/11/01/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/11/01/git使用指南/</id>
    <published>2019-11-01T10:20:12.000Z</published>
    <updated>2019-11-02T15:01:24.682Z</updated>
    
    <content type="html"><![CDATA[<p>愿世间的美好，与你环环相扣。</p><a id="more"></a> <h2 id="git基本概念"><a href="#git基本概念" class="headerlink" title="git基本概念"></a>git基本概念</h2><p>工作区：存放项目代码的地方</p><p>暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以暂存区有时也叫作索引（index）</p><p>版本库（或称本地仓库）：.git目录就是版本库</p><p>远程仓库：github或gitlab上建的仓库</p><p>安装：<br>1、msysgit是windows版的Git，下载安装即可<br>2、安装好后，打开Git Bash，设置全局参数<br>    git config –global user.name “keelin”<br>    git config –global user.email “<a href="mailto:812610493@qq.com" target="_blank" rel="noopener">812610493@qq.com</a>“<br>    这俩参数配置好后，针对当前机器上所有的git仓库有效</p><h2 id="本地仓库的使用："><a href="#本地仓库的使用：" class="headerlink" title="本地仓库的使用："></a>本地仓库的使用：</h2><p>一、git仓库初始化<br>1、git init<br>    使用该命令将当前目录变成git管理的目录，会生成一个.git文件夹</p><p>二、提交<br>1、git add<br>    使用该命令将文件添加到暂存区（如：git add readme.txt）<br>    针对不同情况，可以添加如下参数进行add：<br>    git add <file>  提交单个文件<br>    git add .    // 提交所有发生变化的文件添加到暂存区(增改)，不包括删除<br>    git add -u  // 只提交修改的文件和删除添加到暂存区，不包括新文件<br>    git add -A  //所有文件（. &amp;&amp; -u 集合）</file></p><p>2、git commit<br>    使用该命令告诉git，将文件提交到本地仓库（如：git commit -m ‘新增readme.txt’）</p><p>3、git status<br>    使用该命令查看当前是否还有文件未提交到本地仓库</p><p>4、git diff<br>    使用该命令查看当前文件（工作区文件）与本地仓库有哪些不同（如：git diff readme.txt）<br>    不常用，一般可以通过IDE工具（eclipse、idea等）更直观的方式比对</p><p>三、版本回退<br>1、git log<br>    查看提交的版本信息（由近到远）<br>    git log –pretty=oneline 单行显示</p><p>2、git reset<br>    使用该命令进行版本回退<br>    git reset –hard HEAD^  回退到上一个版本<br>    git reset –hard HEAD~100 回退到之前100个版本   100表示之前第几个版本<br>    重置之后，版本库、暂存区和工作区的内容全部重置为某个commit的状态，工作区中如果存在还未提交到暂存区的文件则还会继续保留。</p><p>3、git reflog<br>    可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）<br>    git reset命令会使重置目标版本之后的commit版本丢失，使用git reflog ，结合git reset命令可以重新重置到已删除的commit</p><p>4、git revert<br>    区别于git reset的版本回退，此命令回滚到某次commit且该commit之后的提交记录都会保留，并且会在此基础上新建一个提交。</p><p>四、撤销修改<br>1、git checkout<br>    git checkout – readme.txt<br>    如果本地修改的文件还未暂存，那执行此命令，就回到与版本库一样的状态<br>    如果已经暂存，接着又做了修改，那执行此命令则回到添加暂存区后的状态</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：<br>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：ssh-keygen -t rsa –C “<a href="mailto:812610493@qq.com" target="_blank" rel="noopener">812610493@qq.com</a>“</p><p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p><p>一、将本地仓库push到远程仓库<br>    1、github上新建一个仓库（略）<br>    2、使用  git remote add origin <a href="https://github.com/sunkening0/keelin.git" target="_blank" rel="noopener">https://github.com/sunkening0/keelin.git</a>  将本地仓库与远程仓库建立联系<br>    3、git push -u origin master   第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和            远程的master分支关联起来<br>    4、以后只要本地仓库做了提交就使用  git push origin master 命令推到远程</p><p>二、远程仓库项目克隆到本地仓库<br>    1、 git clone <a href="https://github.com/sunkening0/keelin.git" target="_blank" rel="noopener">https://github.com/sunkening0/keelin.git</a>  即可<br>    2、创建和合并分支<br>        查看分支：git branch<br>        创建分支：git branch name<br>        切换分支：git checkout name<br>        创建+切换分支：git checkout -b name<br>        合并某分支到当前分支：git merge name<br>        删除分支：git branch -d name<br>    3、冲突解决<br>        合并之后文件可能会产生冲突，需要解决冲突后再提交<br>        Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;dev 是指dev上修改的内容。</p><p>三、bug分支<br>    在当前分支开发的代码还不想提交，但是要切换到其他分支开发其他代码，可以使用如下命令：<br>    1、git stash  将当前的工作现场隐藏起来<br>    2、回到原来分支后，使用 git stash list 查看隐藏的现场<br>    3、 git stash apply恢复，恢复后，stash内容并不删                除，你需要使用命令git stash drop来删除<br>         另一种方式是使用git stash pop,恢复的同时把stash            内容也删除了。</p><h1 id="总结（常用命令）："><a href="#总结（常用命令）：" class="headerlink" title="总结（常用命令）："></a>总结（常用命令）：</h1><p>Git init<br>Git clone<br>Git checkout  b（分支）<br>Git branch -a  查看所有的分支<br>Git add （1）<br>Git commit -m “提交代码”（2）<br>Git push  （3）<br>以上三个步骤是最常用的。</p><p>Git remote add origin<br>Git push -u origin dev<br>Git status<br>Git log<br>Git merge dev<br>Git push<br>Git stash<br>Git statsh pop</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;愿世间的美好，与你环环相扣。&lt;/p&gt;
    
    </summary>
    
      <category term="TOOLS" scheme="http://yoursite.com/categories/TOOLS/"/>
    
    
      <category term="GIT" scheme="http://yoursite.com/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>多线程异常捕获</title>
    <link href="http://yoursite.com/2019/10/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/"/>
    <id>http://yoursite.com/2019/10/03/多线程异常捕获/</id>
    <published>2019-10-03T02:02:48.000Z</published>
    <updated>2019-10-03T06:51:25.614Z</updated>
    
    <content type="html"><![CDATA[<p>在java多线程程序中，所有线程都不允许抛出未捕获的checkedexception，也就是说各个线程需要自己把自己的checkedexception处理掉。</p><a id="more"></a><p>这一点是通过java.lang.Runnable.run()方法声明(因为此方法声明上没有throwexception部分)进行了约束。但是线程依然有可能抛出unchecked exception，当此类异常跑抛出时，线程就会终结，而对于主线程和其他线程完全不受影响，且完全感知不到某个线程抛出的异常(也是说完全无法catch到这个异常)。JVM的这种设计源自于这样一种理念：“线程是独立执行的代码片断，线程的问题应该由线程自己来解决，而不要委托到外部。”基于这样的设计理念，在Java中，线程方法的异常（无论是checked还是unchecked exception），都应该在线程代码边界之内（run方法内）进行try catch并处理掉。<br>   但如果线程确实没有自己try catch某个unchecked exception，而我们又想在线程代码边界之外（run方法之外）来捕获和处理这个异常的话，java为我们提供了一种线程内发生异常时能够在线程代码边界之外处理异常的回调机制，即Thread对象提供的setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)方法。通过该方法给某个thread设置一个UncaughtExceptionHandler，可以确保在该线程出现异常时能通过回调UncaughtExceptionHandler接口的public void uncaughtException(Thread t, Throwable e)方法来处理异常，这样的好处或者说目的是可以在线程代码边界之外（Thread的run()方法之外），有一个地方能处理未捕获异常。但是要特别明确的是：虽然是在回调方法中处理异常，但这个回调方法在执行时依然还在抛出异常的这个线程中！另外还要特别说明一点：如果线程是通过线程池创建，线程异常发生时UncaughtExceptionHandler接口不一定会立即回调。</p><p>   比之上述方法，还有一种编程上的处理方式可以借鉴，即，有时候主线程的调用方可能只是想知道子线程执行过程中发生过哪些异常，而不一定会处理或是立即处理，那么发起子线程的方法可以把子线程抛出的异常实例收集起来作为一个Exception的List返回给调用方，由调用方来根据异常情况决定如何应对。不过要特别注意的是，此时子线程早以终结。</p><p>原文链接：<a href="https://blog.csdn.net/bluishglc/article/details/8216824" target="_blank" rel="noopener">https://blog.csdn.net/bluishglc/article/details/8216824</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在java多线程程序中，所有线程都不允许抛出未捕获的checkedexception，也就是说各个线程需要自己把自己的checkedexception处理掉。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq（一）（五种队列、四种交换机模式）</title>
    <link href="http://yoursite.com/2019/08/02/rabbitmq%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E4%BA%94%E7%A7%8D%E9%98%9F%E5%88%97%E3%80%81%E5%9B%9B%E7%A7%8D%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/02/rabbitmq（一）（五种队列、四种交换机模式）/</id>
    <published>2019-08-02T08:12:45.000Z</published>
    <updated>2019-09-11T15:38:24.109Z</updated>
    
    <content type="html"><![CDATA[<p>rabbitmq（一）（五种队列、四种交换机模式）</p><a id="more"></a> <p>rabbitmq（一）（五种队列、四种交换机模式）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rabbitmq（一）（五种队列、四种交换机模式）&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>线程池在springboot中的应用</title>
    <link href="http://yoursite.com/2019/08/01/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%9C%A8springboot%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/01/线程池在springboot中的应用/</id>
    <published>2019-08-01T05:41:34.000Z</published>
    <updated>2019-09-11T15:37:43.467Z</updated>
    
    <content type="html"><![CDATA[<p>线程池在springboot中的应用</p><a id="more"></a> <p>线程池在springboot中的应用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线程池在springboot中的应用&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + shiro集成（六）注解验证</title>
    <link href="http://yoursite.com/2019/07/31/springboot2.0%20+%20shiro%E9%9B%86%E6%88%90%EF%BC%88%E5%85%AD%EF%BC%89%E6%B3%A8%E8%A7%A3%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2019/07/31/springboot2.0 + shiro集成（六）注解验证/</id>
    <published>2019-07-31T13:40:12.000Z</published>
    <updated>2019-11-02T14:52:12.559Z</updated>
    
    <content type="html"><![CDATA[<p>我们必须接受失望,因为它是有限的,但千万不可失去希望,因为它是无穷的。 -马丁.路德.金</p><a id="more"></a> <p>springboot2.0 + shiro集成（六）注解验证</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们必须接受失望,因为它是有限的,但千万不可失去希望,因为它是无穷的。 -马丁.路德.金&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + shiro集成（五）异常处理</title>
    <link href="http://yoursite.com/2019/07/31/springboot2.0%20+%20shiro%E9%9B%86%E6%88%90%EF%BC%88%E4%BA%94%EF%BC%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/31/springboot2.0 + shiro集成（五）异常处理/</id>
    <published>2019-07-31T12:40:12.000Z</published>
    <updated>2019-11-02T15:15:36.878Z</updated>
    
    <content type="html"><![CDATA[<p>这城市越大越让人心慌。</p><a id="more"></a> <p>springboot2.0 + shiro集成（五）异常处理</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这城市越大越让人心慌。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + shiro集成（四）多realm验证</title>
    <link href="http://yoursite.com/2019/07/29/springboot2.0%20+%20shiro%E9%9B%86%E6%88%90%EF%BC%88%E5%9B%9B%EF%BC%89%E5%A4%9Arealm%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2019/07/29/springboot2.0 + shiro集成（四）多realm验证/</id>
    <published>2019-07-29T12:40:12.000Z</published>
    <updated>2019-09-11T15:22:31.644Z</updated>
    
    <content type="html"><![CDATA[<p>直道相思了无益，未妨惆怅是清狂。</p><a id="more"></a> <p>springboot2.0 + shiro集成（四）多realm验证</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直道相思了无益，未妨惆怅是清狂。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + shiro集成（三）记住我</title>
    <link href="http://yoursite.com/2019/07/29/springboot2.0%20+%20shiro%E9%9B%86%E6%88%90%EF%BC%88%E4%B8%89%EF%BC%89%E8%AE%B0%E4%BD%8F%E6%88%91/"/>
    <id>http://yoursite.com/2019/07/29/springboot2.0 + shiro集成（三）记住我/</id>
    <published>2019-07-29T11:13:43.000Z</published>
    <updated>2019-11-02T15:16:25.304Z</updated>
    
    <content type="html"><![CDATA[<p>从此无心爱良夜，任她明月下西楼。</p><a id="more"></a> <p>springboot2.0 + shiro集成（三）记住我</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从此无心爱良夜，任她明月下西楼。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + shiro集成（二）session共享</title>
    <link href="http://yoursite.com/2019/07/29/springboot2.0%20+%20shiro%E9%9B%86%E6%88%90%EF%BC%88%E4%BA%8C%EF%BC%89session%E5%85%B1%E4%BA%AB/"/>
    <id>http://yoursite.com/2019/07/29/springboot2.0 + shiro集成（二）session共享/</id>
    <published>2019-07-29T09:02:48.000Z</published>
    <updated>2019-09-11T15:14:27.011Z</updated>
    
    <content type="html"><![CDATA[<p>风吹北巷南街伤，花落南国北亭凉。</p><a id="more"></a> <p>springboot2.0 + shiro集成（二）session共享</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;风吹北巷南街伤，花落南国北亭凉。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + shiro集成（一）初识shiro</title>
    <link href="http://yoursite.com/2019/07/26/springboot2.0%20+%20shiro%E9%9B%86%E6%88%90%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%9D%E8%AF%86shiro/"/>
    <id>http://yoursite.com/2019/07/26/springboot2.0 + shiro集成（一）初识shiro/</id>
    <published>2019-07-26T12:31:12.000Z</published>
    <updated>2019-11-02T14:52:59.526Z</updated>
    
    <content type="html"><![CDATA[<p>生平所幸皆历历，负尽苍生不负卿。</p><a id="more"></a> <p>Shiro是一个Java平台的开源权限框架，用于认证和访问授权。</p><h2 id="shiro架构简介"><a href="#shiro架构简介" class="headerlink" title="shiro架构简介"></a>shiro架构简介</h2><p>在shiro架构中，有3个最主要的组件：Subject，SecurityManager，Realm。</p><ol><li>Subject本质上就是当前访问用户的抽象描述。</li><li>SecurityManager是Shiro架构中最核心的组件，通过它可以协调其他组件完成用户认证和授权。相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</li><li>Realm定义了访问数据的方式，用来连接不同的数据源，如：数据库，配置文件等等。可以有1个或多个Realm（多个Realm时可以是共同验证，也可以不同realm对应不同业务），可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm。</li></ol><p>从应用程序角度看shiro的工作流程：<br><img src="https://img-blog.csdnimg.cn/20190905090751845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Byb2plY3Rfc3Vu,size_16,color_FFFFFF,t_70" alt="从应用程序角度看shiro的工作流程"></p><p>shiro内部架构：<br><img src="https://img-blog.csdnimg.cn/20190905085115768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Byb2plY3Rfc3Vu,size_16,color_FFFFFF,t_70" alt="shiro内部架构"><br>由上图看出，除了三个主要组件之外，shiro还包含了以下几个组件：</p><ol><li>Authenticator：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li>Authrizer：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li>SessionManager：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</li><li>SessionDAO：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</li><li>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能；</li><li>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的。</li></ol><p>本篇主要介绍一下shiro如何与springboot整合。下面通过一个登录验证业务介绍一下。</p><h2 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h2><p>版本信息：<br>springboot：2.1.6<br>shiro：1.4.0</p><h3 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、编写自定义realm"><a href="#2、编写自定义realm" class="headerlink" title="2、编写自定义realm"></a>2、编写自定义realm</h3><p>自定义realm需要重写AuthorizingRealm 的doGetAuthenticationInfo和doGetAuthorizationInfo方法，前者在调用subject.login()方法是会被调用，用于做认证，后者在使用@Require…等鉴权配置的时候会被调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 用户名密码登录</span><br><span class="line"> @PostMapping(&quot;/dologin&quot;)</span><br><span class="line"> @ResponseBody</span><br><span class="line"> public BackAdminResult dologin(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;password&quot;) String password, @RequestParam(&quot;rememberMe&quot;) boolean rememberMe,</span><br><span class="line">   HttpSession session) throws AuthenticationException &#123;</span><br><span class="line">  //rememberMe 记住我</span><br><span class="line">  UsernamePasswordToken token = new UsernamePasswordToken(username, password,rememberMe);</span><br><span class="line">  Subject subject = SecurityUtils.getSubject();</span><br><span class="line">  try &#123;</span><br><span class="line">   //subject.getSession().setTimeout(180000000);</span><br><span class="line">   subject.login(token);</span><br><span class="line">  &#125; catch (IncorrectCredentialsException ice) &#123;</span><br><span class="line">   return BackAdminResult.build(1, &quot;密码错误&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  User user = (User) subject.getPrincipal();</span><br><span class="line">  return BackAdminResult.build(0, &quot;登录成功！&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3、自定义业务过滤器"><a href="#3、自定义业务过滤器" class="headerlink" title="3、自定义业务过滤器"></a>3、自定义业务过滤器</h3><p>shiro中已经提供了很多内置的Filter，其中常见的有anon,authc,perms,roles，也可以覆写方法实现自定义filter，以满足自己的业务需求。<br>isAccessAllowed方法和onAccessDenied方法，只要两者有一个可以就可以了，从名字中我们也可以理解，逻辑是这样：先调用isAccessAllowed，如果返回的是true，则直接放行执行后面的filter和servlet，如果返回的是false，则继续执行后面的onAccessDenied方法，如果后面返回的是true则也可以有权限继续执行后面的filter和servelt。只有两个函数都返回false才会阻止后面的filter和servlet的执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class OAuth2Filter extends AuthenticatingFilter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationToken createToken(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        //获取请求token</span><br><span class="line">        String token = getRequestToken((HttpServletRequest) request);</span><br><span class="line">       /* if (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;*/</span><br><span class="line">        //return new OAuth2Token(token);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) &#123;</span><br><span class="line">        if (((HttpServletRequest) request).getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        //获取请求token，如果token不存在，直接返回401</span><br><span class="line">        String token = getRequestToken((HttpServletRequest) request);</span><br><span class="line">        /*if (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">            httpResponse.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line">            httpResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, HttpContextUtils.getOrigin());</span><br><span class="line">            String json = new Gson().toJson(JsonResult.error(HttpStatus.SC_UNAUTHORIZED, &quot;invalid token&quot;));</span><br><span class="line">            httpResponse.getWriter().print(json);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;*/</span><br><span class="line">        return executeLogin(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">        httpResponse.setContentType(&quot;application/json;charset=utf-8&quot;);</span><br><span class="line">        httpResponse.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line">       /*// httpResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, HttpContextUtils.getOrigin());</span><br><span class="line">        try &#123;</span><br><span class="line">            //处理登录失败的异常</span><br><span class="line">            Throwable throwable = e.getCause() == null ? e : e.getCause();</span><br><span class="line">            JsonResult r = JsonResult.error(HttpStatus.SC_UNAUTHORIZED, throwable.getMessage());</span><br><span class="line">            String json = new Gson().toJson(r);</span><br><span class="line">            httpResponse.getWriter().print(json);</span><br><span class="line">        &#125; catch (IOException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;*/</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 获取请求的token</span><br><span class="line">     */</span><br><span class="line">    private String getRequestToken(HttpServletRequest httpRequest) &#123;</span><br><span class="line">        //从header中获取token</span><br><span class="line">        String token = httpRequest.getHeader(&quot;token&quot;);</span><br><span class="line">        //如果header中不存在token，则从参数中获取token</span><br><span class="line">        /*if (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            token = httpRequest.getParameter(&quot;token&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">*/</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、ShiroConfig配置"><a href="#4、ShiroConfig配置" class="headerlink" title="4、ShiroConfig配置"></a>4、ShiroConfig配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.skn.keelin.shiro.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AbstractAuthenticator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.pam.ModularRealmAuthenticator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.SessionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.CookieRememberMeManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.servlet.SimpleCookie;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.session.mgt.DefaultWebSessionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.skn.keelin.shiro.config.redis.RedisSessionDAO;</span><br><span class="line"><span class="keyword">import</span> com.skn.keelin.shiro.config.redis.ShiroRedisCache;</span><br><span class="line"><span class="keyword">import</span> com.skn.keelin.shiro.config.redis.ShiroRedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> com.skn.keelin.shiro.oauth2.realms.PhoneRealm;</span><br><span class="line"><span class="keyword">import</span> com.skn.keelin.shiro.oauth2.realms.UserRealm;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CredentialsMatcher <span class="title">credentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line"><span class="comment">// 加密算法：MD5、SHA1</span></span><br><span class="line">credentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line"><span class="comment">// 散列次数:md5(md5("")) 默认一次</span></span><br><span class="line">credentialsMatcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> credentialsMatcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">(CredentialsMatcher credentialsMatcher)</span> </span>&#123;</span><br><span class="line">UserRealm userRealm = <span class="keyword">new</span> UserRealm();</span><br><span class="line">userRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"><span class="comment">// userRealm.setCacheManager(shiroCacheManager());</span></span><br><span class="line"><span class="keyword">return</span> userRealm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(UserRealm userRealm, PhoneRealm phoneRealm,</span></span></span><br><span class="line"><span class="function"><span class="params">AbstractAuthenticator abstractAuthenticator)</span> </span>&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line"><span class="comment">// 设置realms</span></span><br><span class="line">List&lt;Realm&gt; realms = <span class="keyword">new</span> ArrayList&lt;Realm&gt;();</span><br><span class="line">realms.add(userRealm);</span><br><span class="line">securityManager.setRealms(realms);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager, SessionManager sessionManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilter = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//oauth过滤</span></span><br><span class="line">        Map&lt;String, Filter&gt; filters = <span class="keyword">new</span> HashMap&lt;String, Filter&gt;();</span><br><span class="line">        shiroFilter.setFilters(filters);</span><br><span class="line">        filters.put(<span class="string">"oauth2"</span>, <span class="keyword">new</span> OAuth2Filter());</span><br><span class="line">        filters.put(<span class="string">"rememberMe"</span>, <span class="keyword">new</span> RememberAuthenticationFilter());</span><br><span class="line">        <span class="comment">//filters.put("logout", new SystemLogoutFilter());</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//过滤链定义，从上向下顺序执行  一般将/**放在最为下边 </span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        filterMap.put(<span class="string">"/sys/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/captcha"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">// 注册用户</span></span><br><span class="line">        filterMap.put(<span class="string">"/sys/user/reg"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//swagger</span></span><br><span class="line">        filterMap.put(<span class="string">"/swagger-resources/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/swagger/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/v2/api-docs"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/v2/api-docs-ext"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/swagger-ui.html"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/webjars/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/doc.html"</span>, <span class="string">"anon"</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">"/druid/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">// api接口放权</span></span><br><span class="line">        filterMap.put(<span class="string">"/api/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">// websocket 放权</span></span><br><span class="line">        filterMap.put(<span class="string">"/ws/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">// 静态资源</span></span><br><span class="line">        filterMap.put(<span class="string">"/static/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/user/dologin"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        </span><br><span class="line">        filterMap.put(<span class="string">"/user/plogin"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        </span><br><span class="line">        filterMap.put(<span class="string">"/hello"</span>, <span class="string">"authc"</span>);<span class="comment">//测试多线程用</span></span><br><span class="line">        filterMap.put(<span class="string">"/getTicket"</span>, <span class="string">"anon"</span>);<span class="comment">//测试消息队列用</span></span><br><span class="line">        filterMap.put(<span class="string">"/getTicket1"</span>, <span class="string">"anon"</span>);<span class="comment">//测试消息队列用</span></span><br><span class="line">        filterMap.put(<span class="string">"/getTicket2"</span>, <span class="string">"anon"</span>);<span class="comment">//测试消息队列用</span></span><br><span class="line">        filterMap.put(<span class="string">"/redis"</span>, <span class="string">"anon"</span>);<span class="comment">//测试redis集群用</span></span><br><span class="line">        filterMap.put(<span class="string">"/services/**"</span>, <span class="string">"anon"</span>);<span class="comment">//测试webservice接口用</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span></span><br><span class="line">        shiroFilter.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">     <span class="comment">// 登录成功后要跳转的链接</span></span><br><span class="line">        shiroFilter.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">     <span class="comment">// 未授权界面;</span></span><br><span class="line">        shiroFilter.setUnauthorizedUrl(<span class="string">"/403"</span>);  <span class="comment">//自己写403页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//filterMap.put("/**", "oauth2");</span></span><br><span class="line">        <span class="comment">//filterMap.put("/**", "rememberMe");</span></span><br><span class="line">        filterMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**     </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 开启shiro aop注解支持.     </span></span><br><span class="line"><span class="comment"> * 使用代理方式;所以需要开启代码支持;      </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> securityManager     </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     </span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line"><span class="meta">@Bean</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;        </span><br><span class="line">AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();       </span><br><span class="line">authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);    </span><br><span class="line"><span class="keyword">return</span> authorizationAttributeSourceAdvisor; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户名密码登录</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/dologin"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BackAdminResult <span class="title">dologin</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password, @<span class="title">RequestParam</span><span class="params">(<span class="string">"rememberMe"</span>)</span> <span class="keyword">boolean</span> rememberMe,</span></span><br><span class="line"><span class="function">HttpSession session) <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rememberMe 记住我</span></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password,rememberMe);</span><br><span class="line"></span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//subject.getSession().setTimeout(180000000);</span></span><br><span class="line">subject.login(token);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line"><span class="keyword">return</span> BackAdminResult.build(<span class="number">1</span>, <span class="string">"密码错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User user = (User) subject.getPrincipal();</span><br><span class="line"><span class="keyword">return</span> BackAdminResult.build(<span class="number">0</span>, <span class="string">"登录成功！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190911143408554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Byb2plY3Rfc3Vu,size_16,color_FFFFFF,t_70" alt="登录成功" title="登录成功"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生平所幸皆历历，负尽苍生不负卿。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + quartz 分布式定时任务</title>
    <link href="http://yoursite.com/2019/07/25/springboot2.0%20+%20quartz%20%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/07/25/springboot2.0 + quartz 分布式定时任务/</id>
    <published>2019-07-25T14:12:12.000Z</published>
    <updated>2019-11-29T14:17:36.140Z</updated>
    
    <content type="html"><![CDATA[<p>因项目是集群部署，因此同样的定时任务，在集群中的每台机器都会执行，这样定时任务就会重复执行，不但会增加服务器的负担，还会因为定时任务重复执行造成额外的不可预期的错误。因此下面采用 spring-boot-starter-quartz 实现分布式任务部署。</p><a id="more"></a> <h2 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h2><p>版本信息：<br>springboot：2.1.6<br>quartz：2.3.1</p><h3 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、application-quartz-yml配置"><a href="#2、application-quartz-yml配置" class="headerlink" title="2、application-quartz.yml配置"></a>2、application-quartz.yml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  quartz:</span><br><span class="line">    job-store-type: jdbc #数据库方式</span><br><span class="line">    jdbc:</span><br><span class="line">      initialize-schema: never #不初始化表结构</span><br><span class="line">    properties:</span><br><span class="line">      org:</span><br><span class="line">        quartz:</span><br><span class="line">          scheduler:</span><br><span class="line">            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span><br><span class="line">            #instanceName: clusteredScheduler #quartzScheduler</span><br><span class="line">          jobStore:</span><br><span class="line">            class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置</span><br><span class="line">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理</span><br><span class="line">            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。</span><br><span class="line">            tablePrefix: qrtz_  #数据库表前缀</span><br><span class="line">            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。</span><br><span class="line">            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span><br><span class="line">            isClustered: true #打开集群功能</span><br><span class="line">          threadPool: #连接池</span><br><span class="line">            class: org.quartz.simpl.SimpleThreadPool</span><br><span class="line">            threadCount: 10</span><br><span class="line">            threadPriority: 5</span><br><span class="line">            threadsInheritContextClassLoaderOfInitializingThread: true</span><br></pre></td></tr></table></figure><p>在application.yml文件中将上面的文件配置进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    # 运行环境 dev|test|prod,根据active动态加载application-active.yml配置文件</span><br><span class="line">    active: dev,quartz</span><br></pre></td></tr></table></figure><h3 id="3、实现一个任务类"><a href="#3、实现一个任务类" class="headerlink" title="3、实现一个任务类"></a>3、实现一个任务类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@DisallowConcurrentExecution</span><br><span class="line">public class Job extends QuartzJobBean &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</span><br><span class="line">        // 获取参数</span><br><span class="line">        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        log.info(&quot;定时任务执行中。。。参数：&quot;+jobDataMap.get(&quot;name&quot;).toString());</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@DisallowConcurrentExecution的作用是 保证上一个任务执行完后，再去执行下一个任务，这里的任务是同一个任务,所以这里不必担心线程安全问题了。</p><h3 id="4、实现对定时任务的操作"><a href="#4、实现对定时任务的操作" class="headerlink" title="4、实现对定时任务的操作"></a>4、实现对定时任务的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class ScheduleJobManage &#123;</span><br><span class="line"> @Autowired</span><br><span class="line"> private Scheduler scheduler;</span><br><span class="line"> @PostConstruct</span><br><span class="line"> public void startScheduler() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">   // 开启调度器</span><br><span class="line">   scheduler.start();</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 使用simpleTrigger触发器触发简单任务</span><br><span class="line">  * </span><br><span class="line">  * @param jobClass</span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  * @param jobTime</span><br><span class="line">  *            每隔多长时间执行一次任务</span><br><span class="line">  * @param jobTimes</span><br><span class="line">  *            执行几次 &lt;0时不限制次数</span><br><span class="line">  * @param jobData</span><br><span class="line">  */</span><br><span class="line"> public void saveSimpleJob(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, int jobTime,</span><br><span class="line">   int jobTimes, Map jobData) &#123;</span><br><span class="line">  log.info(&quot;新增任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   // 任务名称和组构成任务key</span><br><span class="line">   JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();</span><br><span class="line">   // 设置job参数</span><br><span class="line">   if (jobData != null &amp;&amp; jobData.size() &gt; 0) &#123;</span><br><span class="line">    jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">   &#125;</span><br><span class="line">   // 使用simpleTrigger规则</span><br><span class="line">   Trigger trigger = null;</span><br><span class="line">   if (jobTimes &lt; 0) &#123;</span><br><span class="line">    trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">      .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(1).withIntervalInSeconds(jobTime))</span><br><span class="line">      .startNow().build();</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">    trigger = TriggerBuilder</span><br><span class="line">      .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class="line">        .repeatSecondlyForever(1).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class="line">      .startNow().build();</span><br><span class="line">   &#125;</span><br><span class="line">   scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 使用cornTrigger触发器</span><br><span class="line">  * </span><br><span class="line">  * @param jobClass</span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  * @param cron</span><br><span class="line">  * @param jobData</span><br><span class="line">  */</span><br><span class="line"> public void saveCronJob(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, String cron,</span><br><span class="line">   Map jobData) &#123;</span><br><span class="line">  log.info(&quot;新增任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   // 任务名称和组构成任务key</span><br><span class="line">   JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();</span><br><span class="line">   // 设置job参数</span><br><span class="line">   if (jobData != null &amp;&amp; jobData.size() &gt; 0) &#123;</span><br><span class="line">    jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">   &#125;</span><br><span class="line">   // 使用cornTrigger规则</span><br><span class="line">   // 触发器key</span><br><span class="line">   Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">     .startAt(DateBuilder.futureDate(1, IntervalUnit.SECOND))</span><br><span class="line">     .withSchedule(CronScheduleBuilder.cronSchedule(cron)).startNow().build();</span><br><span class="line">   // 把作业和触发器注册到任务调度中</span><br><span class="line">   scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 修改cron时间表达式</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  * @param jobTime</span><br><span class="line">  */</span><br><span class="line"> public void updateJob(String jobName, String jobGroupName, String cron) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">   TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">   CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">   trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">     .withSchedule(CronScheduleBuilder.cronSchedule(cron)).build();</span><br><span class="line">   // 重启触发器</span><br><span class="line">   scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 删除job</span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void deleteJob(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;删除任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">   // 停止触发器</span><br><span class="line">   scheduler.pauseTrigger(triggerKey);</span><br><span class="line">   // 移除触发器</span><br><span class="line">   scheduler.unscheduleJob(triggerKey);</span><br><span class="line">   // 删除任务</span><br><span class="line">   scheduler.deleteJob(new JobKey(jobName, jobGroupName));</span><br><span class="line">  &#125; catch (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 暂停任务</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void pause(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;暂停任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   JobKey key = new JobKey(jobName, jobGroupName);</span><br><span class="line">   scheduler.pauseJob(key);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 恢复任务</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void resume(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;恢复任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   JobKey key = new JobKey(jobName, jobGroupName);</span><br><span class="line">   scheduler.resumeJob(key);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 触发任务 立即执行</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void trigger(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;触发任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   JobKey key = new JobKey(jobName, jobGroupName);</span><br><span class="line">   scheduler.triggerJob(key);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 获取所有计划中的任务列表</span><br><span class="line">  *</span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line"> public List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; jobList = null;</span><br><span class="line">  try &#123;</span><br><span class="line">   GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class="line">   Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class="line">   jobList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">   for (JobKey jobKey : jobKeys) &#123;</span><br><span class="line">    List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class="line">    for (Trigger trigger : triggers) &#123;</span><br><span class="line">     Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">     map.put(&quot;jobName&quot;, jobKey.getName());</span><br><span class="line">     map.put(&quot;jobGroupName&quot;, jobKey.getGroup());</span><br><span class="line">     map.put(&quot;description&quot;, &quot;触发器:&quot; + trigger.getKey());</span><br><span class="line">     Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">     map.put(&quot;jobStatus&quot;, triggerState.name());</span><br><span class="line">     if (trigger instanceof CronTrigger) &#123;</span><br><span class="line">      CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">      String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">      map.put(&quot;jobTime&quot;, cronExpression);</span><br><span class="line">     &#125;</span><br><span class="line">     jobList.add(map);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  return jobList;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 获取所有正在运行的job</span><br><span class="line">  *</span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line"> public List&lt;Map&lt;String, Object&gt;&gt; queryRunJob() &#123;</span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; jobList = null;</span><br><span class="line">  try &#123;</span><br><span class="line">   List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class="line">   jobList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class="line">   for (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">    JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class="line">    JobKey jobKey = jobDetail.getKey();</span><br><span class="line">    Trigger trigger = executingJob.getTrigger();</span><br><span class="line">    map.put(&quot;jobName&quot;, jobKey.getName());</span><br><span class="line">    map.put(&quot;jobGroupName&quot;, jobKey.getGroup());</span><br><span class="line">    map.put(&quot;description&quot;, &quot;触发器:&quot; + trigger.getKey());</span><br><span class="line">    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">    map.put(&quot;jobStatus&quot;, triggerState.name());</span><br><span class="line">    if (trigger instanceof CronTrigger) &#123;</span><br><span class="line">     CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">     String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">     map.put(&quot;jobTime&quot;, cronExpression);</span><br><span class="line">    &#125;</span><br><span class="line">    jobList.add(map);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  return jobList;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>使用CommandLineRunner实现在应用初始化时初始化任务。需要实现其run()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TestQuartzTask implements CommandLineRunner &#123;</span><br><span class="line"> @Autowired</span><br><span class="line"> ScheduleJobManage scheduleJobManage;</span><br><span class="line"> public void run(String... args) throws Exception &#123;</span><br><span class="line">  System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;服务启动执行，执行加载数据等操作&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;); </span><br><span class="line">  HashMap&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;name&quot;,1);     </span><br><span class="line">        ScheduleJobEntity scheduleJobEntity = new ScheduleJobEntity();     </span><br><span class="line">        scheduleJobManage.deleteJob(&quot;job&quot;, &quot;test&quot;);</span><br><span class="line">        scheduleJobManage.saveCronJob(Job.class, &quot;job&quot;, &quot;test&quot;, &quot;0 * * * * ?&quot;, map);</span><br><span class="line">        map.put(&quot;name&quot;,2);</span><br><span class="line">        scheduleJobManage.deleteJob(&quot;job2&quot;, &quot;test&quot;);</span><br><span class="line">        scheduleJobManage.saveCronJob(Job.class, &quot;job2&quot;, &quot;test&quot;, &quot;10 * * * * ?&quot;, map);</span><br><span class="line">        map.put(&quot;name&quot;,3);</span><br><span class="line">        scheduleJobManage.deleteJob(&quot;job3&quot;, &quot;test2&quot;);</span><br><span class="line">        scheduleJobManage.saveCronJob(Job.class, &quot;job3&quot;, &quot;test2&quot;, &quot;15 * * * * ?&quot;, map);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实例化了三个任务进去，同时开启两个端口模拟测试任务调度情况。<br>模拟服务器1：<br><img src="https://img-blog.csdnimg.cn/2019090223484888.png" alt="在这里插入图片描述"><br>模拟服务器2：<br><img src="https://img-blog.csdnimg.cn/20190902234941532.png" alt="在这里插入图片描述"><br>由上面运行情况可以看出3个任务在两台模拟服务器上同时只能有一个执行成功。</p><p>PS:quartz分布式任务调度是通过数据库悲观锁实现的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因项目是集群部署，因此同样的定时任务，在集群中的每台机器都会执行，这样定时任务就会重复执行，不但会增加服务器的负担，还会因为定时任务重复执行造成额外的不可预期的错误。因此下面采用 spring-boot-starter-quartz 实现分布式任务部署。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + redis集群配置</title>
    <link href="http://yoursite.com/2019/07/19/springboot2.0%20+%20redis%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/07/19/springboot2.0 + redis集群配置/</id>
    <published>2019-07-19T13:02:48.000Z</published>
    <updated>2019-09-08T08:35:33.523Z</updated>
    
    <content type="html"><![CDATA[<p>因为项目中使用到了redis，并且是集群部署，之前做过单机版的redis整合，下面说一下redis集群的整合过程。</p><a id="more"></a> <p>redis集群采用的部署架构是一主二从三哨兵。<br>具体服务器安装配置可参考：<a href="http://www.cnblogs.com/zwcry/p/9046207.html" target="_blank" rel="noopener">主从配置</a>、<a href="https://www.cnblogs.com/zwcry/p/9134721.html" target="_blank" rel="noopener">哨兵配置</a></p><p>版本信息：<br>springboot：2.1.6<br>redis：3.2.100</p><h2 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h2><h3 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h3><p>使用springboot集成的redis包，实现了自动配置，不需要再单独实现redis的配置了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2、application-yml配置"><a href="#2、application-yml配置" class="headerlink" title="2、application.yml配置"></a>2、application.yml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">## 单机</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">##</span><br><span class="line">## 集群</span><br><span class="line">#    cluster:</span><br><span class="line">#      nodes:</span><br><span class="line">#       - 192.168.172.128:6380</span><br><span class="line">#       - 192.168.172.128:6381</span><br><span class="line">#       - 192.168.172.128:6382</span><br><span class="line">### 哨兵</span><br><span class="line">#    sentinel:</span><br><span class="line">#      master: mymaster</span><br><span class="line">#      nodes:</span><br><span class="line">#        - 192.168.172.128:26001</span><br><span class="line">#        - 192.168.172.128:26002</span><br><span class="line">##</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">### 连接池最大连接数（使用负值表示没有限制） </span><br><span class="line">        max-active: 9</span><br><span class="line">### 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">        max-wait: -1</span><br><span class="line">### 连接池中的最大空闲连接 </span><br><span class="line">        max-idle: 9</span><br><span class="line">### 连接池中的最小空闲连接 </span><br><span class="line">        min-idle: 0</span><br><span class="line">### Redis数据库索引(默认为0) </span><br><span class="line">    database: 0</span><br><span class="line">### 连接超时时间（毫秒） </span><br><span class="line">    timeout: 60000</span><br></pre></td></tr></table></figure><h3 id="3、数据序列化"><a href="#3、数据序列化" class="headerlink" title="3、数据序列化"></a>3、数据序列化</h3><p>因为redis是一种基于字符串存储的NoSQL，而Java是一种基于对象的语言，对象是无法直接存储到redis的，所以可以通过序列化的方式，将对象转为二进制字符串存储，同时通过反序列化转为对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line"></span><br><span class="line">RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">// key采用String的序列化方式</span><br><span class="line">redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">// hash的key也采用String的序列化方式</span><br><span class="line">redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">// valuevalue采用jackson序列化方式</span><br><span class="line">/*redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">// hash的value采用jackson序列化方式</span><br><span class="line">redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);*/</span><br><span class="line">redisTemplate.afterPropertiesSet();</span><br><span class="line">return redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、编写一个数据操作的工具类"><a href="#4、编写一个数据操作的工具类" class="headerlink" title="4、编写一个数据操作的工具类"></a>4、编写一个数据操作的工具类</h3><p>为了方便对redis的操作，写了一个操作redis的工具类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line">* @ClassName: RedisUtil</span><br><span class="line">* @Description:  Redis工具类</span><br><span class="line">* @author skn</span><br><span class="line">* @date 2019年8月7日</span><br><span class="line">*</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public final class RedisUtil &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">// =============================common============================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 指定缓存失效时间</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param time 时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public boolean expire(String key, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据key 获取过期时间</span><br><span class="line"> * </span><br><span class="line"> * @param key 键 不能为null</span><br><span class="line"> * @return 时间(秒) 返回0代表为永久有效</span><br><span class="line"> */</span><br><span class="line">public long getExpire(String key) &#123;</span><br><span class="line">return redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 判断key是否存在</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return true 存在 false不存在</span><br><span class="line"> */</span><br><span class="line">public boolean hasKey(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.hasKey(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 删除缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key 可以传一个值 或多个</span><br><span class="line"> */</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public void del(String... key) &#123;</span><br><span class="line">if (key != null &amp;&amp; key.length &gt; 0) &#123;</span><br><span class="line">if (key.length == 1) &#123;</span><br><span class="line">redisTemplate.delete(key[0]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ============================String=============================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 普通缓存获取</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return 值</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Object get(String key) &#123;</span><br><span class="line">return key == null ? null : redisTemplate.opsForValue().get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 普通缓存放入</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return true成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean set(String key, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForValue().set(key, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 普通缓存放入并设置时间</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="line"> * @return true成功 false 失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean set(String key, Object value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">set(key, value);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 递增</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param delta 要增加几(大于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long incr(String key, long delta) &#123;</span><br><span class="line">if (delta &lt; 0) &#123;</span><br><span class="line">throw new RuntimeException(&quot;递增因子必须大于0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 递减</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param delta 要减少几(小于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long decr(String key, long delta) &#123;</span><br><span class="line">if (delta &lt; 0) &#123;</span><br><span class="line">throw new RuntimeException(&quot;递减因子必须大于0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ================================Map=================================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * HashGet</span><br><span class="line"> * </span><br><span class="line"> * @param key  键 不能为null</span><br><span class="line"> * @param item 项 不能为null</span><br><span class="line"> * @return 值</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Object hget(String key, String item) &#123;</span><br><span class="line">return redisTemplate.opsForHash().get(key, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取hashKey对应的所有键值</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return 对应的多个键值</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Map&lt;Object, Object&gt; hmget(String key) &#123;</span><br><span class="line">return redisTemplate.opsForHash().entries(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * HashSet</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @param map 对应多个键值</span><br><span class="line"> * @return true 成功 false 失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hmset(String key, Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * HashSet 并设置时间</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param map  对应多个键值</span><br><span class="line"> * @param time 时间(秒)</span><br><span class="line"> * @return true成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">expire(key, time);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param item  项</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return true 成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hset(String key, String item, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param item  项</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="line"> * @return true 成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hset(String key, String item, Object value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">expire(key, time);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 删除hash表中的值</span><br><span class="line"> * </span><br><span class="line"> * @param key  键 不能为null</span><br><span class="line"> * @param item 项 可以使多个 不能为null</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public void hdel(String key, Object... item) &#123;</span><br><span class="line">redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 判断hash表中是否有该项的值</span><br><span class="line"> * </span><br><span class="line"> * @param key  键 不能为null</span><br><span class="line"> * @param item 项 不能为null</span><br><span class="line"> * @return true 存在 false不存在</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hHasKey(String key, String item) &#123;</span><br><span class="line">return redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param item 项</span><br><span class="line"> * @param by   要增加几(大于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public double hincr(String key, String item, double by) &#123;</span><br><span class="line">return redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * hash递减</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param item 项</span><br><span class="line"> * @param by   要减少记(小于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public double hdecr(String key, String item, double by) &#123;</span><br><span class="line">return redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ============================set=============================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据key获取Set中的所有值</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Set&lt;Object&gt; sGet(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().members(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据value从一个set中查询,是否存在</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return true 存在 false不存在</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean sHasKey(String key, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将数据放入set缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key    键</span><br><span class="line"> * @param values 值 可以是多个</span><br><span class="line"> * @return 成功个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long sSet(String key, Object... values) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().add(key, values);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将set数据放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key    键</span><br><span class="line"> * @param time   时间(秒)</span><br><span class="line"> * @param values 值 可以是多个</span><br><span class="line"> * @return 成功个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long sSetAndTime(String key, long time, Object... values) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">if (time &gt; 0)</span><br><span class="line">expire(key, time);</span><br><span class="line">return count;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取set缓存的长度</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long sGetSetSize(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().size(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 移除值为value的</span><br><span class="line"> * </span><br><span class="line"> * @param key    键</span><br><span class="line"> * @param values 值 可以是多个</span><br><span class="line"> * @return 移除的个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long setRemove(String key, Object... values) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">return count;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ===============================list=================================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取list缓存的内容</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param start 开始</span><br><span class="line"> * @param end   结束 0 到 -1代表所有值</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public List&lt;Object&gt; lGet(String key, long start, long end) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取list缓存的长度</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long lGetListSize(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForList().size(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 通过索引 获取list中的值</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Object lGetIndex(String key, long index) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForList().index(key, index);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, Object value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">if (time &gt; 0)</span><br><span class="line">expire(key, time);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, List&lt;Object&gt; value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, List&lt;Object&gt; value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">if (time &gt; 0)</span><br><span class="line">expire(key, time);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据索引修改list中的某条数据</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param index 索引</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lUpdateIndex(String key, long index, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 移除N个值为value</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param count 移除多少个</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return 移除的个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long lRemove(String key, long count, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">return remove;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Set keys = redisUtil.keys(this.keyPrefix + &quot;*&quot;);</span><br><span class="line">/**</span><br><span class="line"> * 获取like key的所有key</span><br><span class="line"> * @param key</span><br><span class="line"> * @param count</span><br><span class="line"> * @param value</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public Set&lt;String&gt; keys(String pattern) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Set&lt;String&gt; set = redisTemplate.keys(pattern);</span><br><span class="line">return set;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestRedis &#123;</span><br><span class="line"> @Autowired</span><br><span class="line"> RedisUtil redisUtil;</span><br><span class="line"> @GetMapping(&quot;/redis&quot;)</span><br><span class="line"> public String test()&#123;</span><br><span class="line">  redisUtil.set(&quot;sunkening&quot;, &quot;123123&quot;);</span><br><span class="line">  return &quot;success&quot;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在虚拟机上起了三个节点，实现了redis集群的主从复制功能：<br><img src="https://img-blog.csdnimg.cn/2019090816331885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Byb2plY3Rfc3Vu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>PS：现在springboot已经将redis模块进行了整合，实现了自动化配置，基本只需要将redis集群信息配置到配置文件就可以使用，大大简化了开发流程。</p><p>代码实现：<a href="https://github.com/sunkening0/keelin" target="_blank" rel="noopener">keelin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为项目中使用到了redis，并且是集群部署，之前做过单机版的redis整合，下面说一下redis集群的整合过程。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0日志----logback</title>
    <link href="http://yoursite.com/2019/07/17/springboot2.0%E6%97%A5%E5%BF%97(logback)/"/>
    <id>http://yoursite.com/2019/07/17/springboot2.0日志(logback)/</id>
    <published>2019-07-17T02:02:48.000Z</published>
    <updated>2019-08-30T15:05:21.675Z</updated>
    
    <content type="html"><![CDATA[<p>logback是springboot自带的日志集成，能够将日志按指定的规则输出到控制台、磁盘和数据库。</p><a id="more"></a> <h2 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h2><p>springboot版本：2.1.6</p><h3 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、logback-spring-xml文件配置"><a href="#2、logback-spring-xml文件配置" class="headerlink" title="2、logback-spring.xml文件配置"></a>2、logback-spring.xml文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration debug=&quot;false&quot;&gt;</span><br><span class="line">    &lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span><br><span class="line">    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_HOME&quot; source=&quot;logging.path&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 控制台输出 --&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">    &lt;appender name=&quot;FILE&quot;  class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!--日志文件输出的文件名--&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;$&#123;LOG_HOME&#125;/%d&#123;yyyy-MM-dd&#125;/MIXPAY_%d&#123;yyyy-MM-s&#125;.log&lt;/FileNamePattern&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;MaxHistory&gt;50&lt;/MaxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!--日志文件最大的大小--&gt;</span><br><span class="line">        &lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</span><br><span class="line">            &lt;MaxFileSize&gt;50MB&lt;/MaxFileSize&gt;</span><br><span class="line">        &lt;/triggeringPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--日志异步到数据库 --&gt;</span><br><span class="line">    &lt;appender name=&quot;DB_APPENDER&quot; class=&quot;com.config.LogDBAppender&quot;&gt;</span><br><span class="line">        &lt;filter class=&quot;com.config.LogbackMarkerFilter&quot;&gt;</span><br><span class="line">            　&lt;!-- 自定义标志 --&gt;</span><br><span class="line">            　&lt;marker&gt;DB&lt;/marker&gt;</span><br><span class="line">            　&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            　&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;connectionSource class=&quot;ch.qos.logback.core.db.DataSourceConnectionSource&quot;&gt;</span><br><span class="line">            &lt;dataSource class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">                &lt;driverClassName&gt;net.sf.log4jdbc.DriverSpy&lt;/driverClassName&gt;</span><br><span class="line">                &lt;url&gt;jdbc:log4jdbc:mysql://127.0.0.1:3306/dbname?characterEncoding=UTF-8&lt;/url&gt;</span><br><span class="line">                &lt;username&gt;root&lt;/username&gt;</span><br><span class="line">                &lt;password&gt;123456&lt;/password&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/connectionSource&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 异步日志记录 --&gt;</span><br><span class="line">    &lt;appender name=&quot;ASYNC_APPENDER&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt;</span><br><span class="line">        　　&lt;appender-ref ref=&quot;DB_APPENDER&quot; /&gt;</span><br><span class="line">        　　&lt;includeCallerData&gt;true&lt;/includeCallerData&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 日志输出级别 ，就是说在整个项目中,日志级别在info一上的日志都打印。 root是根日志打印器，只有一个，负责整个系统的日志输出  --&gt;</span><br><span class="line">      &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">          &lt;!-- 控制台输出 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span><br><span class="line">          &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;FILE&quot;/&gt;</span><br><span class="line">          &lt;!-- 异步数据库--&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;ASYNC_APPENDER&quot;/&gt;</span><br><span class="line">      &lt;/root&gt;</span><br><span class="line">    &lt;!-- 指定特定包下面的日志输出级别。logger是root的子打印器，可以有多个，输出name配置的包中的日志。 --&gt;</span><br><span class="line">    &lt;logger name=&quot;com.skn.keelin&quot; level=&quot;debug&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="3、application-yml文件配置"><a href="#3、application-yml文件配置" class="headerlink" title="3、application.yml文件配置"></a>3、application.yml文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:logback-spring.xml</span><br></pre></td></tr></table></figure><p>PS：<br>1、异步到数据库的配置还没有验证过。<br>2、配置文件命名为 logback-spring.xml 而非 logback.xml 的好处是，可以使用 <springprofile></springprofile>指定环境，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 日志输出级别 ，就是说在整个项目中,日志级别在info一上的日志都打印。 root是根日志打印器，只有一个，负责整个系统的日志输出  --&gt;</span><br><span class="line">&lt;springProfile name=&quot;pro&quot;&gt;</span><br><span class="line">      &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">          &lt;!-- 控制台输出 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span><br><span class="line">          &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;FILE&quot;/&gt;</span><br><span class="line">          &lt;!-- 异步数据库--&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;ASYNC_APPENDER&quot;/&gt;</span><br><span class="line">      &lt;/root&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;logback是springboot自带的日志集成，能够将日志按指定的规则输出到控制台、磁盘和数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>slf4j、log4j、logback关系详解</title>
    <link href="http://yoursite.com/2019/07/16/slf4j%E3%80%81log4j%E3%80%81logback%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/07/16/slf4j、log4j、logback关系详解/</id>
    <published>2019-07-16T02:02:48.000Z</published>
    <updated>2019-09-02T04:06:41.179Z</updated>
    
    <content type="html"><![CDATA[<p>slf4j、log4j、logback关系详解。</p><a id="more"></a> <p><img src="https://img-blog.csdnimg.cn/20190821112732278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Byb2plY3Rfc3Vu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。<br>他们可以单独的使用，也可以绑定slf4j一起使用：<br>1、单独使用。分别调用框架自己的方法来输出日志信息。<br>2、绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）</p><p>springboot中自带的日志集成的是logback：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用方法（springboot+logback）：<br>1、引入spring-boot-starter-logging<br>2、resource下新建logback-spring.xml文件（内容参考下一篇springboot与logback整合）<br>3、在yml或者properties中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging.config=classpath:log/logback-spring.xml</span><br><span class="line">logging.path=D:/nmyslog/nmys</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;slf4j、log4j、logback关系详解。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 配置swagger</title>
    <link href="http://yoursite.com/2019/07/15/springboot2.0%20%E9%85%8D%E7%BD%AEswagger/"/>
    <id>http://yoursite.com/2019/07/15/springboot2.0 配置swagger/</id>
    <published>2019-07-15T02:02:49.000Z</published>
    <updated>2019-11-29T14:18:08.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>springboot2.0 配置swagger</p></blockquote><a id="more"></a> <h2 id="一、配置过程"><a href="#一、配置过程" class="headerlink" title="一、配置过程"></a>一、配置过程</h2><p>1、引入pom依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- swagger-bootstrap-ui是基于swagger接口api实现的一套UI,因swagger原生ui是上下结构的，在浏览接口时不是很清晰,所以，swagger-bootstrap-ui是基于左右菜单风格的方式,适用与我们在开发后台系统左右结构这种风格类似,方便与接口浏览 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2、配置swagger"><a href="#2、配置swagger" class="headerlink" title="2、配置swagger"></a>2、配置swagger</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@EnableSwagger2</span><br><span class="line">@Configuration</span><br><span class="line">public class Swagger2Configuration&#123;</span><br><span class="line">@Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))//这是注意的代码</span><br><span class="line">                //.apis(RequestHandlerSelectors.basePackage(&quot;com.skn.keelin&quot;)) </span><br><span class="line">                //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                //.paths(PathSelectors.regex(&quot;/.*&quot;))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;xxx接口文档&quot;)</span><br><span class="line">                .description(&quot;xxx相关接口的文档&quot;)</span><br><span class="line">                 .termsOfServiceUrl(&quot;http://www.xxx.com&quot;)</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、配置swagger静态文件过滤"><a href="#3、配置swagger静态文件过滤" class="headerlink" title="3、配置swagger静态文件过滤"></a>3、配置swagger静态文件过滤</h2><p>不进行此步骤，会报404</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line">  public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">    // 解决 swagger-ui.html 404报错</span><br><span class="line">    registry.addResourceHandler(&quot;/swagger-ui.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">    // 解决 doc.html 404 报错</span><br><span class="line">    registry.addResourceHandler(&quot;/doc.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">    registry.addResourceHandler(&quot;/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、swagger相关注解"><a href="#4、swagger相关注解" class="headerlink" title="4、swagger相关注解"></a>4、swagger相关注解</h2><p>参考：<a href="https://www.jb51.net/article/161877.htm" target="_blank" rel="noopener">https://www.jb51.net/article/161877.htm</a></p><h3 id="PS-WebMvcConfigurer接口"><a href="#PS-WebMvcConfigurer接口" class="headerlink" title="PS:WebMvcConfigurer接口"></a>PS:WebMvcConfigurer接口</h3><p>SpringBoot 2.0 后,靠实现WebMvcConfigurer接口来实现自己定义的一些Handler，Interceptor，ViewResolver，MessageConverter等</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;springboot2.0 配置swagger&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Checked异常和UnChecked异常</title>
    <link href="http://yoursite.com/2019/07/15/Checked%E5%BC%82%E5%B8%B8%E5%92%8CUnChecked%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/07/15/Checked异常和UnChecked异常/</id>
    <published>2019-07-15T02:02:47.000Z</published>
    <updated>2019-07-15T14:07:29.501Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Exception类下分为RuntimeException(即unchecked异常)和其他异常(即checked异常)。</p></blockquote><a id="more"></a> <ul><li>Exception类下分为RuntimeException(即unchecked异常)和其他异常(即checked异常)。 *</li></ul><h1 id="Checked异常"><a href="#Checked异常" class="headerlink" title="Checked异常"></a>Checked异常</h1><p>Checked异常，顾名思义，是可检查的异常，即在编译阶段IDE会提示让程序员对该异常进行处理的，比如IOException就是一种Checked异常，我们在对文件进行操作的时候，如果不对其进行异常处理IDE就会提示我们需要在此操作时进行异常处理，否则无法通过编译。</p><h1 id="UnChecked异常"><a href="#UnChecked异常" class="headerlink" title="UnChecked异常"></a>UnChecked异常</h1><p>RuntimeException，是指如果不写关于这些类的异常处理，代码仍然可以通过编译，但是在运行时可能会出现的错误。在我们判断得出程序在运行时可能会出现的这些错误可以对这些异常进行处理，比如IndexOutOfBoundsException(数组越界异常)、NullPointerException(空指针异常)等；还有就是在平常不太熟悉的，我们在编写代码时往往会忽略掉的异常。这两者都是运行时异常，我们只能够对其更大程度的捕获和处理从而提高代码的健壮性。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Exception类下分为RuntimeException(即unchecked异常)和其他异常(即checked异常)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javase" scheme="http://yoursite.com/categories/javase/"/>
    
    
      <category term="javase" scheme="http://yoursite.com/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>vue中，new vue({})与export default {} 两者的区别？</title>
    <link href="http://yoursite.com/2019/05/22/vue%E4%B8%AD%EF%BC%8Cnew%20vue(%7B%7D)%E4%B8%8Eexport%20default%20%7B%7D%20%E4%B8%A4%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/22/vue中，new vue({})与export default {} 两者的区别/</id>
    <published>2019-05-22T02:58:00.000Z</published>
    <updated>2019-05-22T08:27:18.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue中，new vue({})与export default {} 两者的区别？</p></blockquote><a id="more"></a> <h1 id="vue中，new-vue-与export-default-两者的区别？"><a href="#vue中，new-vue-与export-default-两者的区别？" class="headerlink" title="vue中，new vue({})与export default {} 两者的区别？"></a>vue中，new vue({})与export default {} 两者的区别？</h1><ol><li>new vue({}) 只在入口文件 main.js里使用，而其余组件的里的属性和方法的使用，为什么都要放在export default{}中，而不是每个组件都用new Vue({})来生成呢？</li><li>放在export default{}中它是作为一个class被导出的么？</li><li>另外两者的写法也不一样。就data来说，给作为new Vue的参数，它是对象。如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;&lt;h1&gt;我是vue&lt;/h1&gt;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>而在 export default中，它就成了方法，这是为什么呢？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;     </span><br><span class="line"> data() &#123;       </span><br><span class="line">     return &#123;            </span><br><span class="line">         seller1:&#123;&#125;       </span><br><span class="line">     &#125;;     </span><br><span class="line">  &#125;,      </span><br><span class="line">  components: &#123;&apos;v-header&apos;: header&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1 &amp; 2： export default 的是一个对象 Object，然后父组件通过 components 属性注册，其实是内部调用了 Vue.extend 方法，把这个 Object 传入，然后得到的也是一个 Vue 的实例。为啥用 Vue.extend 而不是直接new Vue，因为他们要建立父子关系，形成一个 Vue 的组件树。</p><ol start="3"><li>组件里的 data 必须是一个方法，因为组件是多个实例，如果 data 是一个同一个 object，那么一个组件的修改会影响另一个，因此它必须返回一个方法。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;vue中，new vue({})与export default {} 两者的区别？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>分布式和微服务的区别</title>
    <link href="http://yoursite.com/2019/05/07/%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/07/分布式和微服务的区别/</id>
    <published>2019-05-07T02:58:00.000Z</published>
    <updated>2019-05-07T03:34:10.565Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分布式和微服务的区别</p></blockquote><a id="more"></a> <h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务?"></a>什么是微服务?</h1><p>微服务是一种面向服务的架构(SOA)风格（Java开发人员最重要的技能之一），其中，应用程序被构建为多个不同的小型服务的集合而不是单个应用程序。与单个程序不同的是，微服务让你可以同时运行多个独立的应用程序，而这些独立的应用程序可以使用不同的编码或编程语言来创建。庞大而又复杂的应用程序可以由多个可自行执行的简单而又独立的程序所组成。这些较小的程序组合在一起，可以提供庞大的单程序所具备的所有功能。<br><img src="/2019/05/07/分布式和微服务的区别/weifuwu.png" alt="微服务架构图"></p><h1 id="什么是分布式？"><a href="#什么是分布式？" class="headerlink" title="什么是分布式？"></a>什么是分布式？</h1><p>所谓分布式,无非就是将一个系统拆分成多个子系统并分布到多个服务器上.<br>简单的说，是指将用户界面、控制台服务、数据库管理三个层次部署在不同的位置上。其中用户界面是客户端实现的功能，控制台服务是一个专门的服务器，数据管理是在一个专门的数据库服务器上实现的。<br><img src="/2019/05/07/分布式和微服务的区别/fenbushi.png" alt="分布式架构图"></p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>分布式是从整体架构的war包里把service层压力大的service独立成单独的服务（jar包启动）。<br>微服务是从整体war包里将controller，service完全拆分出来作为一个独立的服务，数据库也要拆分成独立的数据库。每一个微服务都是一个完整的服务（从http请求到返回），<br>在微服务内部，将需要对外提供的接口包装成RPC接口，对外部开放。</p><h1 id="关于微服务是否必须包装RPC接口的问题"><a href="#关于微服务是否必须包装RPC接口的问题" class="headerlink" title="关于微服务是否必须包装RPC接口的问题"></a>关于微服务是否必须包装RPC接口的问题</h1><p>既然有http 请求，为什么还要用rpc(dubbo接口)调用？<br>http好比普通话，rpc好比团伙内部黑话。</p><p>讲普通话，好处就是谁都听得懂，谁都会讲。<br>讲黑话，好处是可以更精简、更加保密、更加可定制，坏处就是要求“说”黑话的那一方（client端）也要懂，而且一旦大家都说一种黑话了，换黑话就困难了。</p><p>RPC主要是基于TCP/IP协议的，而HTTP服务主要是基于HTTP协议的，我们都知道HTTP协议是在传输层协议TCP之上的，所以效率来看的话，RPC当然是要更胜一筹啦！</p><p>但是所谓的效率优势是针对http1.1协议来讲的，http2.0协议已经优化编码效率问题，像grpc（Google最近公布的开源软件）这种rpc库使用的就是http2.0协议。这么来说吧http容器的性能测试单位通常是kqps，自定义tpc协议则通常是以10kqps到100kqps为基准<br>简单来说成熟的rpc库相对http容器，跟多的是封装了“服务发现”，”错误重试”一类面向服务的高级特性。可以这么理解，rpc框架是面向服务的更高级的封装。如果把一个http server容器上封装一层服务发现和函数代理调用，那它就已经可以做一个rpc框架了。<br>所以为什么要用rpc调用？<br>因为良好的rpc调用是面向服务的封装，针对服务的可用性和效率等都做了优化。单纯使用http调用则缺少了这些特性。<br>springcloud就是使用http协议通信的<br>dubbo使用的协议有很多种(rmi,hessian等)，常用的协议Dubbo。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分布式和微服务的区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="分布式开发" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java中创建对象的5种方式</title>
    <link href="http://yoursite.com/2019/03/20/java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%20/"/>
    <id>http://yoursite.com/2019/03/20/java创建对象有哪几种方式 /</id>
    <published>2019-03-20T02:02:47.000Z</published>
    <updated>2019-08-30T10:13:51.318Z</updated>
    
    <content type="html"><![CDATA[<p>Java中创建对象的5种方式</p><a id="more"></a> <table><thead><tr><th>使用new关键字</th><th>} → 调用了构造函数</th></tr></thead><tbody><tr><td>使用Class类的newInstance方法</td><td>} → 调用了构造函数</td></tr><tr><td>使用Constructor类的newInstance方法</td><td>} → 调用了构造函数</td></tr><tr><td>使用clone方法</td><td>} → 没有调用构造函数</td></tr><tr><td>使用反序列化</td><td>} → 没有调用构造函数</td></tr></tbody></table><h2 id="1-使用new关键字"><a href="#1-使用new关键字" class="headerlink" title="1.使用new关键字"></a>1.使用new关键字</h2><p>这是最常见也是最简单的创建对象的方式了。通过这种方式，我们可以调用任意的构造函数(无参的和带参数的)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee emp1 = new Employee();</span><br></pre></td></tr></table></figure><h2 id="2-使用Class类的newInstance方法"><a href="#2-使用Class类的newInstance方法" class="headerlink" title="2.使用Class类的newInstance方法"></a>2.使用Class类的newInstance方法</h2><p>我们也可以使用Class类的newInstance方法创建对象。这个newInstance方法调用无参的构造函数创建对象。<br>我们可以通过下面方式调用newInstance方法创建对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Employee emp2 = (Employee) Class.forName(&quot;org.programming.mitra.exercises.Employee&quot;).newInstance();</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">Employee emp2 = Employee.class.newInstance();</span><br></pre></td></tr></table></figure><h2 id="3-使用Constructor类的newInstance方法"><a href="#3-使用Constructor类的newInstance方法" class="headerlink" title="3.使用Constructor类的newInstance方法"></a>3.使用Constructor类的newInstance方法</h2><p>和Class类的newInstance方法很像， java.lang.reflect.Constructor类里也有一个newInstance方法可以创建对象。我们可以通过这个newInstance方法调用有参数的和私有的构造函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Employee&gt; constructor = Employee.class.getConstructor();</span><br><span class="line">Employee emp3 = constructor.newInstance();</span><br></pre></td></tr></table></figure><p>这两种newInstance方法就是大家所说的反射。事实上Class的newInstance方法内部调用Constructor的newInstance方法。这也是众多框架，如Spring、Hibernate、Struts等使用后者的原因。</p><h2 id="4-使用clone方法"><a href="#4-使用clone方法" class="headerlink" title="4.使用clone方法"></a>4.使用clone方法</h2><p>无论何时我们调用一个对象的clone方法，jvm就会创建一个新的对象，将前面对象的内容全部拷贝进去。用clone方法创建对象并不会调用任何构造函数。<br>要使用clone方法，我们需要先实现Cloneable接口并实现其定义的clone方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee emp4 = (Employee) emp3.clone();</span><br></pre></td></tr></table></figure><h2 id="5-使用反序列化"><a href="#5-使用反序列化" class="headerlink" title="5.使用反序列化"></a>5.使用反序列化</h2><p>当我们序列化和反序列化一个对象，jvm会给我们创建一个单独的对象。在反序列化时，jvm创建对象并不会调用任何构造函数。<br>为了反序列化一个对象，我们需要让我们的类实现Serializable接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;data.obj&quot;));</span><br><span class="line">Employee emp5 = (Employee) in.readObject();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中创建对象的5种方式&lt;/p&gt;
    
    </summary>
    
      <category term="javase" scheme="http://yoursite.com/categories/javase/"/>
    
    
      <category term="javase" scheme="http://yoursite.com/tags/javase/"/>
    
  </entry>
  
</feed>
