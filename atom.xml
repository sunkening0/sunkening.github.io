<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南风北巷</title>
  
  <subtitle>Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-05T00:40:18.160Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sunkening</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot2.0 + quartz 分布式定时任务</title>
    <link href="http://yoursite.com/2019/07/25/springboot2.0%20+%20quartz%20%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/07/25/springboot2.0 + quartz 分布式定时任务/</id>
    <published>2019-07-25T14:12:12.000Z</published>
    <updated>2019-09-05T00:40:18.160Z</updated>
    
    <content type="html"><![CDATA[<p>因项目是集群部署，因此同样的定时任务，在集群中的每台机器都会执行，这样定时任务就会重复执行，不但会增加服务器的负担，还会因为定时任务重复执行造成额外的不可预期的错误。因此下面采用 spring-boot-starter-quartz 实现分布式任务部署。</p><a id="more"></a> <h2 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h2><p>版本信息：<br>springboot：2.1.6<br>quartz：2.3.1</p><h3 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、application-quartz-yml配置"><a href="#2、application-quartz-yml配置" class="headerlink" title="2、application-quartz.yml配置"></a>2、application-quartz.yml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  quartz:</span><br><span class="line">    job-store-type: jdbc #数据库方式</span><br><span class="line">    jdbc:</span><br><span class="line">      initialize-schema: never #不初始化表结构</span><br><span class="line">    properties:</span><br><span class="line">      org:</span><br><span class="line">        quartz:</span><br><span class="line">          scheduler:</span><br><span class="line">            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span><br><span class="line">            #instanceName: clusteredScheduler #quartzScheduler</span><br><span class="line">          jobStore:</span><br><span class="line">            class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置</span><br><span class="line">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理</span><br><span class="line">            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。</span><br><span class="line">            tablePrefix: qrtz_  #数据库表前缀</span><br><span class="line">            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。</span><br><span class="line">            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span><br><span class="line">            isClustered: true #打开集群功能</span><br><span class="line">          threadPool: #连接池</span><br><span class="line">            class: org.quartz.simpl.SimpleThreadPool</span><br><span class="line">            threadCount: 10</span><br><span class="line">            threadPriority: 5</span><br><span class="line">            threadsInheritContextClassLoaderOfInitializingThread: true</span><br></pre></td></tr></table></figure><p>在application.yml文件中将上面的文件配置进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    # 运行环境 dev|test|prod,根据active动态加载application-active.yml配置文件</span><br><span class="line">    active: dev,quartz</span><br></pre></td></tr></table></figure><h3 id="3、实现一个任务类"><a href="#3、实现一个任务类" class="headerlink" title="3、实现一个任务类"></a>3、实现一个任务类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@DisallowConcurrentExecution</span><br><span class="line">public class Job extends QuartzJobBean &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;</span><br><span class="line">        // 获取参数</span><br><span class="line">        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        log.info(&quot;定时任务执行中。。。参数：&quot;+jobDataMap.get(&quot;name&quot;).toString());</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@DisallowConcurrentExecution的作用是 保证上一个任务执行完后，再去执行下一个任务，这里的任务是同一个任务,所以这里不必担心线程安全问题了。</p><h3 id="4、实现对定时任务的操作"><a href="#4、实现对定时任务的操作" class="headerlink" title="4、实现对定时任务的操作"></a>4、实现对定时任务的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class ScheduleJobManage &#123;</span><br><span class="line"> @Autowired</span><br><span class="line"> private Scheduler scheduler;</span><br><span class="line"> @PostConstruct</span><br><span class="line"> public void startScheduler() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">   // 开启调度器</span><br><span class="line">   scheduler.start();</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 使用simpleTrigger触发器触发简单任务</span><br><span class="line">  * </span><br><span class="line">  * @param jobClass</span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  * @param jobTime</span><br><span class="line">  *            每隔多长时间执行一次任务</span><br><span class="line">  * @param jobTimes</span><br><span class="line">  *            执行几次 &lt;0时不限制次数</span><br><span class="line">  * @param jobData</span><br><span class="line">  */</span><br><span class="line"> public void saveSimpleJob(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, int jobTime,</span><br><span class="line">   int jobTimes, Map jobData) &#123;</span><br><span class="line">  log.info(&quot;新增任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   // 任务名称和组构成任务key</span><br><span class="line">   JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();</span><br><span class="line">   // 设置job参数</span><br><span class="line">   if (jobData != null &amp;&amp; jobData.size() &gt; 0) &#123;</span><br><span class="line">    jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">   &#125;</span><br><span class="line">   // 使用simpleTrigger规则</span><br><span class="line">   Trigger trigger = null;</span><br><span class="line">   if (jobTimes &lt; 0) &#123;</span><br><span class="line">    trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">      .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(1).withIntervalInSeconds(jobTime))</span><br><span class="line">      .startNow().build();</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">    trigger = TriggerBuilder</span><br><span class="line">      .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class="line">        .repeatSecondlyForever(1).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class="line">      .startNow().build();</span><br><span class="line">   &#125;</span><br><span class="line">   scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 使用cornTrigger触发器</span><br><span class="line">  * </span><br><span class="line">  * @param jobClass</span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  * @param cron</span><br><span class="line">  * @param jobData</span><br><span class="line">  */</span><br><span class="line"> public void saveCronJob(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, String cron,</span><br><span class="line">   Map jobData) &#123;</span><br><span class="line">  log.info(&quot;新增任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   // 任务名称和组构成任务key</span><br><span class="line">   JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();</span><br><span class="line">   // 设置job参数</span><br><span class="line">   if (jobData != null &amp;&amp; jobData.size() &gt; 0) &#123;</span><br><span class="line">    jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">   &#125;</span><br><span class="line">   // 使用cornTrigger规则</span><br><span class="line">   // 触发器key</span><br><span class="line">   Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">     .startAt(DateBuilder.futureDate(1, IntervalUnit.SECOND))</span><br><span class="line">     .withSchedule(CronScheduleBuilder.cronSchedule(cron)).startNow().build();</span><br><span class="line">   // 把作业和触发器注册到任务调度中</span><br><span class="line">   scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 修改cron时间表达式</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  * @param jobTime</span><br><span class="line">  */</span><br><span class="line"> public void updateJob(String jobName, String jobGroupName, String cron) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">   TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">   CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">   trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">     .withSchedule(CronScheduleBuilder.cronSchedule(cron)).build();</span><br><span class="line">   // 重启触发器</span><br><span class="line">   scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 删除job</span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void deleteJob(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;删除任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">   // 停止触发器</span><br><span class="line">   scheduler.pauseTrigger(triggerKey);</span><br><span class="line">   // 移除触发器</span><br><span class="line">   scheduler.unscheduleJob(triggerKey);</span><br><span class="line">   // 删除任务</span><br><span class="line">   scheduler.deleteJob(new JobKey(jobName, jobGroupName));</span><br><span class="line">  &#125; catch (Exception e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 暂停任务</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void pause(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;暂停任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   JobKey key = new JobKey(jobName, jobGroupName);</span><br><span class="line">   scheduler.pauseJob(key);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 恢复任务</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void resume(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;恢复任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   JobKey key = new JobKey(jobName, jobGroupName);</span><br><span class="line">   scheduler.resumeJob(key);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 触发任务 立即执行</span><br><span class="line">  * </span><br><span class="line">  * @param jobName</span><br><span class="line">  * @param jobGroupName</span><br><span class="line">  */</span><br><span class="line"> public void trigger(String jobName, String jobGroupName) &#123;</span><br><span class="line">  log.info(&quot;触发任务&quot;);</span><br><span class="line">  try &#123;</span><br><span class="line">   JobKey key = new JobKey(jobName, jobGroupName);</span><br><span class="line">   scheduler.triggerJob(key);</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 获取所有计划中的任务列表</span><br><span class="line">  *</span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line"> public List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; jobList = null;</span><br><span class="line">  try &#123;</span><br><span class="line">   GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class="line">   Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class="line">   jobList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">   for (JobKey jobKey : jobKeys) &#123;</span><br><span class="line">    List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class="line">    for (Trigger trigger : triggers) &#123;</span><br><span class="line">     Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">     map.put(&quot;jobName&quot;, jobKey.getName());</span><br><span class="line">     map.put(&quot;jobGroupName&quot;, jobKey.getGroup());</span><br><span class="line">     map.put(&quot;description&quot;, &quot;触发器:&quot; + trigger.getKey());</span><br><span class="line">     Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">     map.put(&quot;jobStatus&quot;, triggerState.name());</span><br><span class="line">     if (trigger instanceof CronTrigger) &#123;</span><br><span class="line">      CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">      String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">      map.put(&quot;jobTime&quot;, cronExpression);</span><br><span class="line">     &#125;</span><br><span class="line">     jobList.add(map);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  return jobList;</span><br><span class="line"> &#125;</span><br><span class="line"> /**</span><br><span class="line">  * 获取所有正在运行的job</span><br><span class="line">  *</span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line"> public List&lt;Map&lt;String, Object&gt;&gt; queryRunJob() &#123;</span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; jobList = null;</span><br><span class="line">  try &#123;</span><br><span class="line">   List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class="line">   jobList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class="line">   for (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">    JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class="line">    JobKey jobKey = jobDetail.getKey();</span><br><span class="line">    Trigger trigger = executingJob.getTrigger();</span><br><span class="line">    map.put(&quot;jobName&quot;, jobKey.getName());</span><br><span class="line">    map.put(&quot;jobGroupName&quot;, jobKey.getGroup());</span><br><span class="line">    map.put(&quot;description&quot;, &quot;触发器:&quot; + trigger.getKey());</span><br><span class="line">    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">    map.put(&quot;jobStatus&quot;, triggerState.name());</span><br><span class="line">    if (trigger instanceof CronTrigger) &#123;</span><br><span class="line">     CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">     String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">     map.put(&quot;jobTime&quot;, cronExpression);</span><br><span class="line">    &#125;</span><br><span class="line">    jobList.add(map);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; catch (SchedulerException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  return jobList;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>使用CommandLineRunner实现在应用初始化时初始化任务。需要实现其run()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TestQuartzTask implements CommandLineRunner &#123;</span><br><span class="line"> @Autowired</span><br><span class="line"> ScheduleJobManage scheduleJobManage;</span><br><span class="line"> public void run(String... args) throws Exception &#123;</span><br><span class="line">  System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;服务启动执行，执行加载数据等操作&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;); </span><br><span class="line">  HashMap&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;name&quot;,1);     </span><br><span class="line">        ScheduleJobEntity scheduleJobEntity = new ScheduleJobEntity();     </span><br><span class="line">        scheduleJobManage.deleteJob(&quot;job&quot;, &quot;test&quot;);</span><br><span class="line">        scheduleJobManage.saveCronJob(Job.class, &quot;job&quot;, &quot;test&quot;, &quot;0 * * * * ?&quot;, map);</span><br><span class="line">        map.put(&quot;name&quot;,2);</span><br><span class="line">        scheduleJobManage.deleteJob(&quot;job2&quot;, &quot;test&quot;);</span><br><span class="line">        scheduleJobManage.saveCronJob(Job.class, &quot;job2&quot;, &quot;test&quot;, &quot;10 * * * * ?&quot;, map);</span><br><span class="line">        map.put(&quot;name&quot;,3);</span><br><span class="line">        scheduleJobManage.deleteJob(&quot;job3&quot;, &quot;test2&quot;);</span><br><span class="line">        scheduleJobManage.saveCronJob(Job.class, &quot;job3&quot;, &quot;test2&quot;, &quot;15 * * * * ?&quot;, map);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实例化了三个任务进去，同时开启两个端口模拟测试任务调度情况。<br>模拟服务器1：<br><img src="https://img-blog.csdnimg.cn/2019090223484888.png" alt="在这里插入图片描述"><br>模拟服务器2：<br><img src="https://img-blog.csdnimg.cn/20190902234941532.png" alt="在这里插入图片描述"><br>由上面运行情况可以看出3个任务在两台模拟服务器上同时只能有一个执行成功。</p><p>PS:quartz分布式任务调度是通过数据库悲观锁实现的（后边专门出一篇讲一下实现原理）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因项目是集群部署，因此同样的定时任务，在集群中的每台机器都会执行，这样定时任务就会重复执行，不但会增加服务器的负担，还会因为定时任务重复执行造成额外的不可预期的错误。因此下面采用 spring-boot-starter-quartz 实现分布式任务部署。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0 + redis集群配置</title>
    <link href="http://yoursite.com/2019/07/19/springboot2.0%20+%20redis%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/07/19/springboot2.0 + redis集群配置/</id>
    <published>2019-07-19T13:02:48.000Z</published>
    <updated>2019-08-30T16:02:11.397Z</updated>
    
    <content type="html"><![CDATA[<p>因为项目中使用到了redis，并且是集群部署，之前做过单机版的redis整合，下面说一下redis集群的整合过程。</p><a id="more"></a> <p>redis集群采用的部署架构是一主二从三哨兵。<br>具体服务器安装配置可参考：<a href="http://www.cnblogs.com/zwcry/p/9046207.html" target="_blank" rel="noopener">主从配置</a>、<a href="https://www.cnblogs.com/zwcry/p/9134721.html" target="_blank" rel="noopener">哨兵配置</a></p><p>版本信息：<br>springboot：2.1.6<br>redis：3.2.100</p><h2 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h2><h3 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h3><p>使用springboot集成的redis包，实现了自动配置，不需要再单独实现redis的配置了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2、application-yml配置"><a href="#2、application-yml配置" class="headerlink" title="2、application.yml配置"></a>2、application.yml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">## 单机</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">##</span><br><span class="line">## 集群</span><br><span class="line">#    cluster:</span><br><span class="line">#      nodes:</span><br><span class="line">#       - 192.168.172.128:6380</span><br><span class="line">#       - 192.168.172.128:6381</span><br><span class="line">#       - 192.168.172.128:6382</span><br><span class="line">### 哨兵</span><br><span class="line">#    sentinel:</span><br><span class="line">#      master: mymaster</span><br><span class="line">#      nodes:</span><br><span class="line">#        - 192.168.172.128:26001</span><br><span class="line">#        - 192.168.172.128:26002</span><br><span class="line">##</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">### 连接池最大连接数（使用负值表示没有限制） </span><br><span class="line">        max-active: 9</span><br><span class="line">### 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">        max-wait: -1</span><br><span class="line">### 连接池中的最大空闲连接 </span><br><span class="line">        max-idle: 9</span><br><span class="line">### 连接池中的最小空闲连接 </span><br><span class="line">        min-idle: 0</span><br><span class="line">### Redis数据库索引(默认为0) </span><br><span class="line">    database: 0</span><br><span class="line">### 连接超时时间（毫秒） </span><br><span class="line">    timeout: 60000</span><br></pre></td></tr></table></figure><h3 id="3、数据序列化"><a href="#3、数据序列化" class="headerlink" title="3、数据序列化"></a>3、数据序列化</h3><p>因为redis是一种基于字符串存储的NoSQL，而Java是一种基于对象的语言，对象是无法直接存储到redis的，所以可以通过序列化的方式，将对象转为二进制字符串存储，同时通过反序列化转为对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line"></span><br><span class="line">RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">// key采用String的序列化方式</span><br><span class="line">redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">// hash的key也采用String的序列化方式</span><br><span class="line">redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">// valuevalue采用jackson序列化方式</span><br><span class="line">/*redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">// hash的value采用jackson序列化方式</span><br><span class="line">redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);*/</span><br><span class="line">redisTemplate.afterPropertiesSet();</span><br><span class="line">return redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、编写一个数据操作的工具类"><a href="#4、编写一个数据操作的工具类" class="headerlink" title="4、编写一个数据操作的工具类"></a>4、编写一个数据操作的工具类</h3><p>为了方便对redis的操作，写了一个操作redis的工具类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line">* @ClassName: RedisUtil</span><br><span class="line">* @Description:  Redis工具类</span><br><span class="line">* @author skn</span><br><span class="line">* @date 2019年8月7日</span><br><span class="line">*</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public final class RedisUtil &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">// =============================common============================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 指定缓存失效时间</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param time 时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public boolean expire(String key, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据key 获取过期时间</span><br><span class="line"> * </span><br><span class="line"> * @param key 键 不能为null</span><br><span class="line"> * @return 时间(秒) 返回0代表为永久有效</span><br><span class="line"> */</span><br><span class="line">public long getExpire(String key) &#123;</span><br><span class="line">return redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 判断key是否存在</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return true 存在 false不存在</span><br><span class="line"> */</span><br><span class="line">public boolean hasKey(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.hasKey(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 删除缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key 可以传一个值 或多个</span><br><span class="line"> */</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public void del(String... key) &#123;</span><br><span class="line">if (key != null &amp;&amp; key.length &gt; 0) &#123;</span><br><span class="line">if (key.length == 1) &#123;</span><br><span class="line">redisTemplate.delete(key[0]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ============================String=============================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 普通缓存获取</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return 值</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Object get(String key) &#123;</span><br><span class="line">return key == null ? null : redisTemplate.opsForValue().get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 普通缓存放入</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return true成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean set(String key, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForValue().set(key, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 普通缓存放入并设置时间</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="line"> * @return true成功 false 失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean set(String key, Object value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">set(key, value);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 递增</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param delta 要增加几(大于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long incr(String key, long delta) &#123;</span><br><span class="line">if (delta &lt; 0) &#123;</span><br><span class="line">throw new RuntimeException(&quot;递增因子必须大于0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 递减</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param delta 要减少几(小于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long decr(String key, long delta) &#123;</span><br><span class="line">if (delta &lt; 0) &#123;</span><br><span class="line">throw new RuntimeException(&quot;递减因子必须大于0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ================================Map=================================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * HashGet</span><br><span class="line"> * </span><br><span class="line"> * @param key  键 不能为null</span><br><span class="line"> * @param item 项 不能为null</span><br><span class="line"> * @return 值</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Object hget(String key, String item) &#123;</span><br><span class="line">return redisTemplate.opsForHash().get(key, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取hashKey对应的所有键值</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return 对应的多个键值</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Map&lt;Object, Object&gt; hmget(String key) &#123;</span><br><span class="line">return redisTemplate.opsForHash().entries(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * HashSet</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @param map 对应多个键值</span><br><span class="line"> * @return true 成功 false 失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hmset(String key, Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * HashSet 并设置时间</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param map  对应多个键值</span><br><span class="line"> * @param time 时间(秒)</span><br><span class="line"> * @return true成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">expire(key, time);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param item  项</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return true 成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hset(String key, String item, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param item  项</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="line"> * @return true 成功 false失败</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hset(String key, String item, Object value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">if (time &gt; 0) &#123;</span><br><span class="line">expire(key, time);</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 删除hash表中的值</span><br><span class="line"> * </span><br><span class="line"> * @param key  键 不能为null</span><br><span class="line"> * @param item 项 可以使多个 不能为null</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public void hdel(String key, Object... item) &#123;</span><br><span class="line">redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 判断hash表中是否有该项的值</span><br><span class="line"> * </span><br><span class="line"> * @param key  键 不能为null</span><br><span class="line"> * @param item 项 不能为null</span><br><span class="line"> * @return true 存在 false不存在</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean hHasKey(String key, String item) &#123;</span><br><span class="line">return redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param item 项</span><br><span class="line"> * @param by   要增加几(大于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public double hincr(String key, String item, double by) &#123;</span><br><span class="line">return redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * hash递减</span><br><span class="line"> * </span><br><span class="line"> * @param key  键</span><br><span class="line"> * @param item 项</span><br><span class="line"> * @param by   要减少记(小于0)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public double hdecr(String key, String item, double by) &#123;</span><br><span class="line">return redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ============================set=============================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据key获取Set中的所有值</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Set&lt;Object&gt; sGet(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().members(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据value从一个set中查询,是否存在</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return true 存在 false不存在</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean sHasKey(String key, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将数据放入set缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key    键</span><br><span class="line"> * @param values 值 可以是多个</span><br><span class="line"> * @return 成功个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long sSet(String key, Object... values) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().add(key, values);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将set数据放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key    键</span><br><span class="line"> * @param time   时间(秒)</span><br><span class="line"> * @param values 值 可以是多个</span><br><span class="line"> * @return 成功个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long sSetAndTime(String key, long time, Object... values) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">if (time &gt; 0)</span><br><span class="line">expire(key, time);</span><br><span class="line">return count;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取set缓存的长度</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long sGetSetSize(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForSet().size(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 移除值为value的</span><br><span class="line"> * </span><br><span class="line"> * @param key    键</span><br><span class="line"> * @param values 值 可以是多个</span><br><span class="line"> * @return 移除的个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long setRemove(String key, Object... values) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">return count;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ===============================list=================================</span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取list缓存的内容</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param start 开始</span><br><span class="line"> * @param end   结束 0 到 -1代表所有值</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public List&lt;Object&gt; lGet(String key, long start, long end) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 获取list缓存的长度</span><br><span class="line"> * </span><br><span class="line"> * @param key 键</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long lGetListSize(String key) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForList().size(key);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 通过索引 获取list中的值</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public Object lGetIndex(String key, long index) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return redisTemplate.opsForList().index(key, index);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, Object value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">if (time &gt; 0)</span><br><span class="line">expire(key, time);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, List&lt;Object&gt; value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 将list放入缓存</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @param time  时间(秒)</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lSet(String key, List&lt;Object&gt; value, long time) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">if (time &gt; 0)</span><br><span class="line">expire(key, time);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 根据索引修改list中的某条数据</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param index 索引</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public boolean lUpdateIndex(String key, long index, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">return true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 移除N个值为value</span><br><span class="line"> * </span><br><span class="line"> * @param key   键</span><br><span class="line"> * @param count 移除多少个</span><br><span class="line"> * @param value 值</span><br><span class="line"> * @return 移除的个数</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public long lRemove(String key, long count, Object value) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">return remove;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Set keys = redisUtil.keys(this.keyPrefix + &quot;*&quot;);</span><br><span class="line">/**</span><br><span class="line"> * 获取like key的所有key</span><br><span class="line"> * @param key</span><br><span class="line"> * @param count</span><br><span class="line"> * @param value</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public Set&lt;String&gt; keys(String pattern) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Set&lt;String&gt; set = redisTemplate.keys(pattern);</span><br><span class="line">return set;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：现在springboot已经将redis模块进行了整合，实现了自动化配置，基本只需要将redis集群信息配置到配置文件就可以使用，大大简化了开发流程。</p><p>代码实现：<a href="https://github.com/sunkening0/keelin" target="_blank" rel="noopener">keelin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为项目中使用到了redis，并且是集群部署，之前做过单机版的redis整合，下面说一下redis集群的整合过程。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.0日志----logback</title>
    <link href="http://yoursite.com/2019/07/17/springboot2.0%E6%97%A5%E5%BF%97----logback/"/>
    <id>http://yoursite.com/2019/07/17/springboot2.0日志----logback/</id>
    <published>2019-07-17T02:02:48.000Z</published>
    <updated>2019-08-30T15:05:21.675Z</updated>
    
    <content type="html"><![CDATA[<p>logback是springboot自带的日志集成，能够将日志按指定的规则输出到控制台、磁盘和数据库。</p><a id="more"></a> <h2 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h2><p>springboot版本：2.1.6</p><h3 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、logback-spring-xml文件配置"><a href="#2、logback-spring-xml文件配置" class="headerlink" title="2、logback-spring.xml文件配置"></a>2、logback-spring.xml文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration debug=&quot;false&quot;&gt;</span><br><span class="line">    &lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span><br><span class="line">    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_HOME&quot; source=&quot;logging.path&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 控制台输出 --&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">    &lt;appender name=&quot;FILE&quot;  class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!--日志文件输出的文件名--&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;$&#123;LOG_HOME&#125;/%d&#123;yyyy-MM-dd&#125;/MIXPAY_%d&#123;yyyy-MM-s&#125;.log&lt;/FileNamePattern&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;MaxHistory&gt;50&lt;/MaxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!--日志文件最大的大小--&gt;</span><br><span class="line">        &lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</span><br><span class="line">            &lt;MaxFileSize&gt;50MB&lt;/MaxFileSize&gt;</span><br><span class="line">        &lt;/triggeringPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--日志异步到数据库 --&gt;</span><br><span class="line">    &lt;appender name=&quot;DB_APPENDER&quot; class=&quot;com.config.LogDBAppender&quot;&gt;</span><br><span class="line">        &lt;filter class=&quot;com.config.LogbackMarkerFilter&quot;&gt;</span><br><span class="line">            　&lt;!-- 自定义标志 --&gt;</span><br><span class="line">            　&lt;marker&gt;DB&lt;/marker&gt;</span><br><span class="line">            　&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            　&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;connectionSource class=&quot;ch.qos.logback.core.db.DataSourceConnectionSource&quot;&gt;</span><br><span class="line">            &lt;dataSource class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">                &lt;driverClassName&gt;net.sf.log4jdbc.DriverSpy&lt;/driverClassName&gt;</span><br><span class="line">                &lt;url&gt;jdbc:log4jdbc:mysql://127.0.0.1:3306/dbname?characterEncoding=UTF-8&lt;/url&gt;</span><br><span class="line">                &lt;username&gt;root&lt;/username&gt;</span><br><span class="line">                &lt;password&gt;123456&lt;/password&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/connectionSource&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 异步日志记录 --&gt;</span><br><span class="line">    &lt;appender name=&quot;ASYNC_APPENDER&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt;</span><br><span class="line">        　　&lt;appender-ref ref=&quot;DB_APPENDER&quot; /&gt;</span><br><span class="line">        　　&lt;includeCallerData&gt;true&lt;/includeCallerData&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 日志输出级别 ，就是说在整个项目中,日志级别在info一上的日志都打印。 root是根日志打印器，只有一个，负责整个系统的日志输出  --&gt;</span><br><span class="line">      &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">          &lt;!-- 控制台输出 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span><br><span class="line">          &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;FILE&quot;/&gt;</span><br><span class="line">          &lt;!-- 异步数据库--&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;ASYNC_APPENDER&quot;/&gt;</span><br><span class="line">      &lt;/root&gt;</span><br><span class="line">    &lt;!-- 指定特定包下面的日志输出级别。logger是root的子打印器，可以有多个，输出name配置的包中的日志。 --&gt;</span><br><span class="line">    &lt;logger name=&quot;com.skn.keelin&quot; level=&quot;debug&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="3、application-yml文件配置"><a href="#3、application-yml文件配置" class="headerlink" title="3、application.yml文件配置"></a>3、application.yml文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:logback-spring.xml</span><br></pre></td></tr></table></figure><p>PS：<br>1、异步到数据库的配置还没有验证过。<br>2、配置文件命名为 logback-spring.xml 而非 logback.xml 的好处是，可以使用 <springprofile></springprofile>指定环境，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 日志输出级别 ，就是说在整个项目中,日志级别在info一上的日志都打印。 root是根日志打印器，只有一个，负责整个系统的日志输出  --&gt;</span><br><span class="line">&lt;springProfile name=&quot;pro&quot;&gt;</span><br><span class="line">      &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">          &lt;!-- 控制台输出 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span><br><span class="line">          &lt;!-- 按照每天生成日志文件 --&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;FILE&quot;/&gt;</span><br><span class="line">          &lt;!-- 异步数据库--&gt;</span><br><span class="line">          &lt;appender-ref ref=&quot;ASYNC_APPENDER&quot;/&gt;</span><br><span class="line">      &lt;/root&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;logback是springboot自带的日志集成，能够将日志按指定的规则输出到控制台、磁盘和数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>slf4j、log4j、logback关系详解</title>
    <link href="http://yoursite.com/2019/07/16/slf4j%E3%80%81log4j%E3%80%81logback%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/07/16/slf4j、log4j、logback关系详解/</id>
    <published>2019-07-16T02:02:48.000Z</published>
    <updated>2019-09-02T04:06:41.179Z</updated>
    
    <content type="html"><![CDATA[<p>slf4j、log4j、logback关系详解。</p><a id="more"></a> <p><img src="https://img-blog.csdnimg.cn/20190821112732278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Byb2plY3Rfc3Vu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>slf4j是java的一个日志门面，实现了日志框架一些通用的api，log4j和logback是具体的日志框架。<br>他们可以单独的使用，也可以绑定slf4j一起使用：<br>1、单独使用。分别调用框架自己的方法来输出日志信息。<br>2、绑定slf4j一起使用。调用slf4j的api来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）</p><p>springboot中自带的日志集成的是logback：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用方法（springboot+logback）：<br>1、引入spring-boot-starter-logging<br>2、resource下新建logback-spring.xml文件（内容参考下一篇springboot与logback整合）<br>3、在yml或者properties中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging.config=classpath:log/logback-spring.xml</span><br><span class="line">logging.path=D:/nmyslog/nmys</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;slf4j、log4j、logback关系详解。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot2.1.6 配置swagger遇到的坑</title>
    <link href="http://yoursite.com/2019/07/15/springboot2.1.6%20%E9%85%8D%E7%BD%AEswagger%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2019/07/15/springboot2.1.6 配置swagger遇到的坑/</id>
    <published>2019-07-15T02:02:49.000Z</published>
    <updated>2019-08-22T02:47:57.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>springboot2.1.6 配置swagger遇到的坑</p></blockquote><a id="more"></a> <h2 id="一、配置过程"><a href="#一、配置过程" class="headerlink" title="一、配置过程"></a>一、配置过程</h2><p>1、引入pom依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- swagger-bootstrap-ui是基于swagger接口api实现的一套UI,因swagger原生ui是上下结构的，在浏览接口时不是很清晰,所以，swagger-bootstrap-ui是基于左右菜单风格的方式,适用与我们在开发后台系统左右结构这种风格类似,方便与接口浏览 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2、配置swagger"><a href="#2、配置swagger" class="headerlink" title="2、配置swagger"></a>2、配置swagger</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@EnableSwagger2</span><br><span class="line">@Configuration</span><br><span class="line">public class Swagger2Configuration&#123;</span><br><span class="line">@Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))//这是注意的代码</span><br><span class="line">                //.apis(RequestHandlerSelectors.basePackage(&quot;com.skn.keelin&quot;)) </span><br><span class="line">                //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                //.paths(PathSelectors.regex(&quot;/.*&quot;))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private ApiInfo apiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;xxx接口文档&quot;)</span><br><span class="line">                .description(&quot;xxx相关接口的文档&quot;)</span><br><span class="line">                 .termsOfServiceUrl(&quot;http://www.xxx.com&quot;)</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、配置swagger静态文件过滤"><a href="#3、配置swagger静态文件过滤" class="headerlink" title="3、配置swagger静态文件过滤"></a>3、配置swagger静态文件过滤</h2><p>不进行此步骤，会报404</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line">  public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">    // 解决 swagger-ui.html 404报错</span><br><span class="line">    registry.addResourceHandler(&quot;/swagger-ui.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">    // 解决 doc.html 404 报错</span><br><span class="line">    registry.addResourceHandler(&quot;/doc.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">    registry.addResourceHandler(&quot;/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、swagger相关注解"><a href="#4、swagger相关注解" class="headerlink" title="4、swagger相关注解"></a>4、swagger相关注解</h2><p>参考：<a href="https://www.jb51.net/article/161877.htm" target="_blank" rel="noopener">https://www.jb51.net/article/161877.htm</a></p><h3 id="PS-WebMvcConfigurer接口"><a href="#PS-WebMvcConfigurer接口" class="headerlink" title="PS:WebMvcConfigurer接口"></a>PS:WebMvcConfigurer接口</h3><p>SpringBoot 2.0 后,靠实现WebMvcConfigurer接口来实现自己定义的一些Handler，Interceptor，ViewResolver，MessageConverter等</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;springboot2.1.6 配置swagger遇到的坑&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://yoursite.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Checked异常和UnChecked异常</title>
    <link href="http://yoursite.com/2019/07/15/Checked%E5%BC%82%E5%B8%B8%E5%92%8CUnChecked%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/07/15/Checked异常和UnChecked异常/</id>
    <published>2019-07-15T02:02:47.000Z</published>
    <updated>2019-07-15T14:07:29.501Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Exception类下分为RuntimeException(即unchecked异常)和其他异常(即checked异常)。</p></blockquote><a id="more"></a> <ul><li>Exception类下分为RuntimeException(即unchecked异常)和其他异常(即checked异常)。 *</li></ul><h1 id="Checked异常"><a href="#Checked异常" class="headerlink" title="Checked异常"></a>Checked异常</h1><p>Checked异常，顾名思义，是可检查的异常，即在编译阶段IDE会提示让程序员对该异常进行处理的，比如IOException就是一种Checked异常，我们在对文件进行操作的时候，如果不对其进行异常处理IDE就会提示我们需要在此操作时进行异常处理，否则无法通过编译。</p><h1 id="UnChecked异常"><a href="#UnChecked异常" class="headerlink" title="UnChecked异常"></a>UnChecked异常</h1><p>RuntimeException，是指如果不写关于这些类的异常处理，代码仍然可以通过编译，但是在运行时可能会出现的错误。在我们判断得出程序在运行时可能会出现的这些错误可以对这些异常进行处理，比如IndexOutOfBoundsException(数组越界异常)、NullPointerException(空指针异常)等；还有就是在平常不太熟悉的，我们在编写代码时往往会忽略掉的异常。这两者都是运行时异常，我们只能够对其更大程度的捕获和处理从而提高代码的健壮性。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Exception类下分为RuntimeException(即unchecked异常)和其他异常(即checked异常)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javase" scheme="http://yoursite.com/categories/javase/"/>
    
    
      <category term="javase" scheme="http://yoursite.com/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>vue中，new vue({})与export default {} 两者的区别？</title>
    <link href="http://yoursite.com/2019/05/22/vue%E4%B8%AD%EF%BC%8Cnew%20vue(%7B%7D)%E4%B8%8Eexport%20default%20%7B%7D%20%E4%B8%A4%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/22/vue中，new vue({})与export default {} 两者的区别/</id>
    <published>2019-05-22T02:58:00.000Z</published>
    <updated>2019-05-22T08:27:18.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue中，new vue({})与export default {} 两者的区别？</p></blockquote><a id="more"></a> <h1 id="vue中，new-vue-与export-default-两者的区别？"><a href="#vue中，new-vue-与export-default-两者的区别？" class="headerlink" title="vue中，new vue({})与export default {} 两者的区别？"></a>vue中，new vue({})与export default {} 两者的区别？</h1><ol><li>new vue({}) 只在入口文件 main.js里使用，而其余组件的里的属性和方法的使用，为什么都要放在export default{}中，而不是每个组件都用new Vue({})来生成呢？</li><li>放在export default{}中它是作为一个class被导出的么？</li><li>另外两者的写法也不一样。就data来说，给作为new Vue的参数，它是对象。如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;&lt;h1&gt;我是vue&lt;/h1&gt;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>而在 export default中，它就成了方法，这是为什么呢？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;     </span><br><span class="line"> data() &#123;       </span><br><span class="line">     return &#123;            </span><br><span class="line">         seller1:&#123;&#125;       </span><br><span class="line">     &#125;;     </span><br><span class="line">  &#125;,      </span><br><span class="line">  components: &#123;&apos;v-header&apos;: header&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1 &amp; 2： export default 的是一个对象 Object，然后父组件通过 components 属性注册，其实是内部调用了 Vue.extend 方法，把这个 Object 传入，然后得到的也是一个 Vue 的实例。为啥用 Vue.extend 而不是直接new Vue，因为他们要建立父子关系，形成一个 Vue 的组件树。</p><ol start="3"><li>组件里的 data 必须是一个方法，因为组件是多个实例，如果 data 是一个同一个 object，那么一个组件的修改会影响另一个，因此它必须返回一个方法。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;vue中，new vue({})与export default {} 两者的区别？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>分布式和微服务的区别</title>
    <link href="http://yoursite.com/2019/05/07/%E5%88%86%E5%B8%83%E5%BC%8F%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/05/07/分布式和微服务的区别/</id>
    <published>2019-05-07T02:58:00.000Z</published>
    <updated>2019-05-07T03:34:10.565Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分布式和微服务的区别</p></blockquote><a id="more"></a> <h1 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务?"></a>什么是微服务?</h1><p>微服务是一种面向服务的架构(SOA)风格（Java开发人员最重要的技能之一），其中，应用程序被构建为多个不同的小型服务的集合而不是单个应用程序。与单个程序不同的是，微服务让你可以同时运行多个独立的应用程序，而这些独立的应用程序可以使用不同的编码或编程语言来创建。庞大而又复杂的应用程序可以由多个可自行执行的简单而又独立的程序所组成。这些较小的程序组合在一起，可以提供庞大的单程序所具备的所有功能。<br><img src="/2019/05/07/分布式和微服务的区别/weifuwu.png" alt="微服务架构图"></p><h1 id="什么是分布式？"><a href="#什么是分布式？" class="headerlink" title="什么是分布式？"></a>什么是分布式？</h1><p>所谓分布式,无非就是将一个系统拆分成多个子系统并分布到多个服务器上.<br>简单的说，是指将用户界面、控制台服务、数据库管理三个层次部署在不同的位置上。其中用户界面是客户端实现的功能，控制台服务是一个专门的服务器，数据管理是在一个专门的数据库服务器上实现的。<br><img src="/2019/05/07/分布式和微服务的区别/fenbushi.png" alt="分布式架构图"></p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>分布式是从整体架构的war包里把service层压力大的service独立成单独的服务（jar包启动）。<br>微服务是从整体war包里将controller，service完全拆分出来作为一个独立的服务，数据库也要拆分成独立的数据库。每一个微服务都是一个完整的服务（从http请求到返回），<br>在微服务内部，将需要对外提供的接口包装成RPC接口，对外部开放。</p><h1 id="关于微服务是否必须包装RPC接口的问题"><a href="#关于微服务是否必须包装RPC接口的问题" class="headerlink" title="关于微服务是否必须包装RPC接口的问题"></a>关于微服务是否必须包装RPC接口的问题</h1><p>既然有http 请求，为什么还要用rpc(dubbo接口)调用？<br>http好比普通话，rpc好比团伙内部黑话。</p><p>讲普通话，好处就是谁都听得懂，谁都会讲。<br>讲黑话，好处是可以更精简、更加保密、更加可定制，坏处就是要求“说”黑话的那一方（client端）也要懂，而且一旦大家都说一种黑话了，换黑话就困难了。</p><p>RPC主要是基于TCP/IP协议的，而HTTP服务主要是基于HTTP协议的，我们都知道HTTP协议是在传输层协议TCP之上的，所以效率来看的话，RPC当然是要更胜一筹啦！</p><p>但是所谓的效率优势是针对http1.1协议来讲的，http2.0协议已经优化编码效率问题，像grpc（Google最近公布的开源软件）这种rpc库使用的就是http2.0协议。这么来说吧http容器的性能测试单位通常是kqps，自定义tpc协议则通常是以10kqps到100kqps为基准<br>简单来说成熟的rpc库相对http容器，跟多的是封装了“服务发现”，”错误重试”一类面向服务的高级特性。可以这么理解，rpc框架是面向服务的更高级的封装。如果把一个http server容器上封装一层服务发现和函数代理调用，那它就已经可以做一个rpc框架了。<br>所以为什么要用rpc调用？<br>因为良好的rpc调用是面向服务的封装，针对服务的可用性和效率等都做了优化。单纯使用http调用则缺少了这些特性。<br>springcloud就是使用http协议通信的<br>dubbo使用的协议有很多种(rmi,hessian等)，常用的协议Dubbo。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分布式和微服务的区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="分布式开发" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java中创建对象的5种方式</title>
    <link href="http://yoursite.com/2019/03/20/java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%20/"/>
    <id>http://yoursite.com/2019/03/20/java创建对象有哪几种方式 /</id>
    <published>2019-03-20T02:02:47.000Z</published>
    <updated>2019-08-30T10:13:51.318Z</updated>
    
    <content type="html"><![CDATA[<p>Java中创建对象的5种方式</p><a id="more"></a> <table><thead><tr><th>使用new关键字</th><th>} → 调用了构造函数</th></tr></thead><tbody><tr><td>使用Class类的newInstance方法</td><td>} → 调用了构造函数</td></tr><tr><td>使用Constructor类的newInstance方法</td><td>} → 调用了构造函数</td></tr><tr><td>使用clone方法</td><td>} → 没有调用构造函数</td></tr><tr><td>使用反序列化</td><td>} → 没有调用构造函数</td></tr></tbody></table><h2 id="1-使用new关键字"><a href="#1-使用new关键字" class="headerlink" title="1.使用new关键字"></a>1.使用new关键字</h2><p>这是最常见也是最简单的创建对象的方式了。通过这种方式，我们可以调用任意的构造函数(无参的和带参数的)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee emp1 = new Employee();</span><br></pre></td></tr></table></figure><h2 id="2-使用Class类的newInstance方法"><a href="#2-使用Class类的newInstance方法" class="headerlink" title="2.使用Class类的newInstance方法"></a>2.使用Class类的newInstance方法</h2><p>我们也可以使用Class类的newInstance方法创建对象。这个newInstance方法调用无参的构造函数创建对象。<br>我们可以通过下面方式调用newInstance方法创建对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Employee emp2 = (Employee) Class.forName(&quot;org.programming.mitra.exercises.Employee&quot;).newInstance();</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">Employee emp2 = Employee.class.newInstance();</span><br></pre></td></tr></table></figure><h2 id="3-使用Constructor类的newInstance方法"><a href="#3-使用Constructor类的newInstance方法" class="headerlink" title="3.使用Constructor类的newInstance方法"></a>3.使用Constructor类的newInstance方法</h2><p>和Class类的newInstance方法很像， java.lang.reflect.Constructor类里也有一个newInstance方法可以创建对象。我们可以通过这个newInstance方法调用有参数的和私有的构造函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;Employee&gt; constructor = Employee.class.getConstructor();</span><br><span class="line">Employee emp3 = constructor.newInstance();</span><br></pre></td></tr></table></figure><p>这两种newInstance方法就是大家所说的反射。事实上Class的newInstance方法内部调用Constructor的newInstance方法。这也是众多框架，如Spring、Hibernate、Struts等使用后者的原因。</p><h2 id="4-使用clone方法"><a href="#4-使用clone方法" class="headerlink" title="4.使用clone方法"></a>4.使用clone方法</h2><p>无论何时我们调用一个对象的clone方法，jvm就会创建一个新的对象，将前面对象的内容全部拷贝进去。用clone方法创建对象并不会调用任何构造函数。<br>要使用clone方法，我们需要先实现Cloneable接口并实现其定义的clone方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee emp4 = (Employee) emp3.clone();</span><br></pre></td></tr></table></figure><h2 id="5-使用反序列化"><a href="#5-使用反序列化" class="headerlink" title="5.使用反序列化"></a>5.使用反序列化</h2><p>当我们序列化和反序列化一个对象，jvm会给我们创建一个单独的对象。在反序列化时，jvm创建对象并不会调用任何构造函数。<br>为了反序列化一个对象，我们需要让我们的类实现Serializable接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;data.obj&quot;));</span><br><span class="line">Employee emp5 = (Employee) in.readObject();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中创建对象的5种方式&lt;/p&gt;
    
    </summary>
    
      <category term="javase" scheme="http://yoursite.com/categories/javase/"/>
    
    
      <category term="javase" scheme="http://yoursite.com/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot获取前端页面参数的几种方式总结</title>
    <link href="http://yoursite.com/2019/03/13/springboot/"/>
    <id>http://yoursite.com/2019/03/13/springboot/</id>
    <published>2019-03-13T09:02:47.000Z</published>
    <updated>2019-08-30T10:13:19.182Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot的一个好处就是通过注解可以轻松获取前端页面的参数，之后可以将参数经过一系列处理传送到后台数据库，这里稍微总结一下，大致分为以下几种：</p><a id="more"></a> <p>Spring Boot的一个好处就是通过注解可以轻松获取前端页面的参数，之后可以将参数经过一系列处理传送到后台数据库，这里稍微总结一下，大致分为以下几种： </p><p>1.指定前端url请求参数名称与方法名一致，见下图，这种方式简单来说就是url请求格式中的参数需要与方法的参数名称对应上，举个例子，这么一个url请求<a href="http://localhost:8080/0919/test1?name=xxx&amp;pwd=yyy，在指定的控制器类上加上Controller注解，同时指定RequestMapping注解即可，当请求路径参数与方法参数匹配上时会自动注入" target="_blank" rel="noopener">http://localhost:8080/0919/test1?name=xxx&amp;pwd=yyy，在指定的控制器类上加上Controller注解，同时指定RequestMapping注解即可，当请求路径参数与方法参数匹配上时会自动注入</a><br><img src="/2019/03/13/springboot/20190313162011284.png" alt="在这里插入图片描述"><br>启动主程序，访问浏览器出现下图，表明注入参数成功，这种方式一般是get请求<br><img src="/2019/03/13/springboot/20190313162032404.png" alt="在这里插入图片描述"><br>2.第二种方式是通过HttpServletRequest来获取前端页面参数，代码见下图 ，简单来说就是通过调用request的getParameter方法来获取参数，比如访问路径类似这样<a href="http://localhost:8080/0919/test2?firstName=zhang&amp;lastName=san" target="_blank" rel="noopener">http://localhost:8080/0919/test2?firstName=zhang&amp;lastName=san</a><br><img src="/2019/03/13/springboot/20190313162149681.png" alt="在这里插入图片描述"><br>启动主程序，访问浏览器出现下图，表明注入参数成功，这种方式也可以获取表单参数，一般get和post请求都可以<br><img src="/2019/03/13/springboot/20190313162217192.png" alt="在这里插入图片描述"><br>3.第三种方式是通过创建一个JavaBean对象来封装表单参数或者是请求url路径中的参数，具体代码见下图<br><img src="/2019/03/13/springboot/2019031316224242.png" alt="在这里插入图片描述"><br>对应的JavaBean对象是下面这个<br><img src="/2019/03/13/springboot/20190313162259147.png" alt="在这里插入图片描述"><br>简单来说就是将表单参数作为一个JavaBean类的属性，通过设置方法参数为一个JavaBean对象，之后在方法中通过调用对象的get方法来获取表单传过来的参数，比如访问路径是这个<a href="http://localhost:8080/0919/test3?firstName=zhang&amp;lastName=san" target="_blank" rel="noopener">http://localhost:8080/0919/test3?firstName=zhang&amp;lastName=san</a> 启动主程序，在浏览器访问见下图，表明注入参数成功，这种方式如果请求的表单参数很多可以考虑使用这种方式<br><img src="/2019/03/13/springboot/20190313162338182.png" alt="在这里插入图片描述"></p><p>４.第四种方式是通过PathVariable注解来绑定请求路径的参数，参考代码见下<br><img src="/2019/03/13/springboot/2019031316244739.png" alt="在这里插入图片描述"><br>这种情况简单来说就是url中采用动态绑定的形式表示，之后在方法中指定的参数通过PathVariable来将请求的url中的参数绑定到方法参数，这里在不指定PathVariable注解的具体值时按照请求路径中的动态变量顺序与注解顺序一致即可注入 ，如果想指定注入，那么指定PathVariable注解的值与动态变量的名一致即可特定注入。比如请求路径是这个<a href="http://localhost:8080/0919/test4/111/222" target="_blank" rel="noopener">http://localhost:8080/0919/test4/111/222</a><br>启动主程序，在浏览器访问，出现下图表明注入参数成功<br><img src="/2019/03/13/springboot/20190313162554421.png" alt="在这里插入图片描述"></p><p>５.第五种方式是通过RequestParam注解来获取，具体代码见下<br><img src="/2019/03/13/springboot/20190313162617816.png" alt="在这里插入图片描述"><br>这种方式是通过url路径的形式将请求路径上的参数绑定到方法的参数上，简单来说就是实参值赋给相应的形参，与上面那种方式的区别是前者是动态url模板注入，这里是个普通的url请求注入·，比如访问路径是这个<a href="http://localhost:8080/0919/test5?aaa=111&amp;bbb=4444" target="_blank" rel="noopener">http://localhost:8080/0919/test5?aaa=111&amp;bbb=4444</a><br>启动主程序，访问该请求，浏览器出现下面这个表明注入参数成功，这里可以通过指定RequestParam的value值来指定url请求路径参数指定注入到哪个具体方法参数，不过一般两者名字一致比较方便<br><img src="/2019/03/13/springboot/2019031316270556.png" alt="在这里插入图片描述"></p><p>6.第六种方式是通过ModelAttribute方式来注入参数，具体代码见下 </p><p><img src="/2019/03/13/springboot/20190313162755231.png" alt="在这里插入图片描述"></p><p>这种方式一般是通过在页面展示，所以这里创建两个页面做测试test2.jsp和test3.jsp进行测试</p><p><img src="/2019/03/13/springboot/20190313162819802.png" alt="在这里插入图片描述"><br><img src="/2019/03/13/springboot/20190313162840948.png" alt="在这里插入图片描述"></p><p><img src="/2019/03/13/springboot/20190313162853254.png" alt="在这里插入图片描述"><br>简单来说就是通过ModelAttribute注解将请求参数封装到指定的JavaBean对象，同时通过value值将这个接受了表单参数的对象赋给value，这里就是将s赋给了一个变量名为kkk的存在，之后就可以在jsp页面通过这个变量名使用el表达式来获取从表单传过来的参数，这里测试路径是<a href="http://localhost:8080/0919/kkk，访问在浏览器进行测试，见下图" target="_blank" rel="noopener">http://localhost:8080/0919/kkk，访问在浏览器进行测试，见下图</a> </p><p><img src="/2019/03/13/springboot/20190313162922853.png" alt="在这里插入图片描述"><br> 点击提交，出现下图，表明表单参数成功被后台接受并在前台页面输出，这种方式一般是需要在前台页面输出的时候使用<br> <img src="/2019/03/13/springboot/20190313162945766.png" alt="在这里插入图片描述"><br> 总的来说Spring Boot获取前端页面参数的方式大致就上面这几种，可以根据自己的实际情况来选择其中的任意一种方式，个人一般推荐前三种方式，当然具体选哪种还是因人而异。这里简单写了一点简单demo做下测试记录防止长时间不用又忘了，毕竟博客的作用就是这样嘛。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot的一个好处就是通过注解可以轻松获取前端页面的参数，之后可以将参数经过一系列处理传送到后台数据库，这里稍微总结一下，大致分为以下几种：&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
